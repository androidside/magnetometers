// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: test.proto

package gov.nasa.gsfc.protobuf;

public final class ThermometryPacketProtobuf {
  private ThermometryPacketProtobuf() {}
  public static void registerAllExtensions(
      com.google.protobuf.ExtensionRegistry registry) {
  }
  public interface ThermometryPacketOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.ThermometryPacket)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    boolean hasDs();
    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage getDs();
    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder getDsOrBuilder();

    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    boolean hasTr();
    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage getTr();
    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder getTrOrBuilder();

    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    boolean hasMs();
    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage getMs();
    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder getMsOrBuilder();

    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    boolean hasAi();
    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage getAi();
    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder getAiOrBuilder();
  }
  /**
   * Protobuf type {@code proto.ThermometryPacket}
   */
  public static final class ThermometryPacket extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.ThermometryPacket)
      ThermometryPacketOrBuilder {
    // Use ThermometryPacket.newBuilder() to construct.
    private ThermometryPacket(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private ThermometryPacket(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final ThermometryPacket defaultInstance;
    public static ThermometryPacket getDefaultInstance() {
      return defaultInstance;
    }

    public ThermometryPacket getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private ThermometryPacket(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 10: {
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000001) == 0x00000001)) {
                subBuilder = ds_.toBuilder();
              }
              ds_ = input.readMessage(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ds_);
                ds_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000001;
              break;
            }
            case 18: {
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000002) == 0x00000002)) {
                subBuilder = tr_.toBuilder();
              }
              tr_ = input.readMessage(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(tr_);
                tr_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000002;
              break;
            }
            case 26: {
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000004) == 0x00000004)) {
                subBuilder = ms_.toBuilder();
              }
              ms_ = input.readMessage(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ms_);
                ms_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000004;
              break;
            }
            case 34: {
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder subBuilder = null;
              if (((bitField0_ & 0x00000008) == 0x00000008)) {
                subBuilder = ai_.toBuilder();
              }
              ai_ = input.readMessage(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.PARSER, extensionRegistry);
              if (subBuilder != null) {
                subBuilder.mergeFrom(ai_);
                ai_ = subBuilder.buildPartial();
              }
              bitField0_ |= 0x00000008;
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_ThermometryPacket_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_ThermometryPacket_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.Builder.class);
    }

    public static com.google.protobuf.Parser<ThermometryPacket> PARSER =
        new com.google.protobuf.AbstractParser<ThermometryPacket>() {
      public ThermometryPacket parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new ThermometryPacket(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<ThermometryPacket> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int DS_FIELD_NUMBER = 1;
    private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage ds_;
    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    public boolean hasDs() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage getDs() {
      return ds_;
    }
    /**
     * <code>optional .proto.DSPIDMessage ds = 1;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder getDsOrBuilder() {
      return ds_;
    }

    public static final int TR_FIELD_NUMBER = 2;
    private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage tr_;
    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    public boolean hasTr() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage getTr() {
      return tr_;
    }
    /**
     * <code>optional .proto.TReadMessage tr = 2;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder getTrOrBuilder() {
      return tr_;
    }

    public static final int MS_FIELD_NUMBER = 3;
    private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage ms_;
    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    public boolean hasMs() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage getMs() {
      return ms_;
    }
    /**
     * <code>optional .proto.MasterMessage ms = 3;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder getMsOrBuilder() {
      return ms_;
    }

    public static final int AI_FIELD_NUMBER = 4;
    private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage ai_;
    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    public boolean hasAi() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage getAi() {
      return ai_;
    }
    /**
     * <code>optional .proto.AnalogINMessage ai = 4;</code>
     */
    public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder getAiOrBuilder() {
      return ai_;
    }

    private void initFields() {
      ds_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance();
      tr_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance();
      ms_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance();
      ai_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeMessage(1, ds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeMessage(2, tr_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeMessage(3, ms_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeMessage(4, ai_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(1, ds_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(2, tr_);
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(3, ms_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeMessageSize(4, ai_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.ThermometryPacket}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.ThermometryPacket)
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacketOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_ThermometryPacket_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_ThermometryPacket_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.Builder.class);
      }

      // Construct using gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
          getDsFieldBuilder();
          getTrFieldBuilder();
          getMsFieldBuilder();
          getAiFieldBuilder();
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        if (dsBuilder_ == null) {
          ds_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance();
        } else {
          dsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        if (trBuilder_ == null) {
          tr_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance();
        } else {
          trBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        if (msBuilder_ == null) {
          ms_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance();
        } else {
          msBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        if (aiBuilder_ == null) {
          ai_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance();
        } else {
          aiBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_ThermometryPacket_descriptor;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket getDefaultInstanceForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.getDefaultInstance();
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket build() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket buildPartial() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket result = new gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        if (dsBuilder_ == null) {
          result.ds_ = ds_;
        } else {
          result.ds_ = dsBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        if (trBuilder_ == null) {
          result.tr_ = tr_;
        } else {
          result.tr_ = trBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        if (msBuilder_ == null) {
          result.ms_ = ms_;
        } else {
          result.ms_ = msBuilder_.build();
        }
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        if (aiBuilder_ == null) {
          result.ai_ = ai_;
        } else {
          result.ai_ = aiBuilder_.build();
        }
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket) {
          return mergeFrom((gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket other) {
        if (other == gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket.getDefaultInstance()) return this;
        if (other.hasDs()) {
          mergeDs(other.getDs());
        }
        if (other.hasTr()) {
          mergeTr(other.getTr());
        }
        if (other.hasMs()) {
          mergeMs(other.getMs());
        }
        if (other.hasAi()) {
          mergeAi(other.getAi());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.ThermometryPacket) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage ds_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder> dsBuilder_;
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public boolean hasDs() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage getDs() {
        if (dsBuilder_ == null) {
          return ds_;
        } else {
          return dsBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public Builder setDs(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage value) {
        if (dsBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ds_ = value;
          onChanged();
        } else {
          dsBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public Builder setDs(
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder builderForValue) {
        if (dsBuilder_ == null) {
          ds_ = builderForValue.build();
          onChanged();
        } else {
          dsBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public Builder mergeDs(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage value) {
        if (dsBuilder_ == null) {
          if (((bitField0_ & 0x00000001) == 0x00000001) &&
              ds_ != gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance()) {
            ds_ =
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.newBuilder(ds_).mergeFrom(value).buildPartial();
          } else {
            ds_ = value;
          }
          onChanged();
        } else {
          dsBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000001;
        return this;
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public Builder clearDs() {
        if (dsBuilder_ == null) {
          ds_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance();
          onChanged();
        } else {
          dsBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000001);
        return this;
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder getDsBuilder() {
        bitField0_ |= 0x00000001;
        onChanged();
        return getDsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder getDsOrBuilder() {
        if (dsBuilder_ != null) {
          return dsBuilder_.getMessageOrBuilder();
        } else {
          return ds_;
        }
      }
      /**
       * <code>optional .proto.DSPIDMessage ds = 1;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder> 
          getDsFieldBuilder() {
        if (dsBuilder_ == null) {
          dsBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder>(
                  getDs(),
                  getParentForChildren(),
                  isClean());
          ds_ = null;
        }
        return dsBuilder_;
      }

      private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage tr_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder> trBuilder_;
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public boolean hasTr() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage getTr() {
        if (trBuilder_ == null) {
          return tr_;
        } else {
          return trBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public Builder setTr(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage value) {
        if (trBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          tr_ = value;
          onChanged();
        } else {
          trBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public Builder setTr(
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder builderForValue) {
        if (trBuilder_ == null) {
          tr_ = builderForValue.build();
          onChanged();
        } else {
          trBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public Builder mergeTr(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage value) {
        if (trBuilder_ == null) {
          if (((bitField0_ & 0x00000002) == 0x00000002) &&
              tr_ != gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance()) {
            tr_ =
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.newBuilder(tr_).mergeFrom(value).buildPartial();
          } else {
            tr_ = value;
          }
          onChanged();
        } else {
          trBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000002;
        return this;
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public Builder clearTr() {
        if (trBuilder_ == null) {
          tr_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance();
          onChanged();
        } else {
          trBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000002);
        return this;
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder getTrBuilder() {
        bitField0_ |= 0x00000002;
        onChanged();
        return getTrFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder getTrOrBuilder() {
        if (trBuilder_ != null) {
          return trBuilder_.getMessageOrBuilder();
        } else {
          return tr_;
        }
      }
      /**
       * <code>optional .proto.TReadMessage tr = 2;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder> 
          getTrFieldBuilder() {
        if (trBuilder_ == null) {
          trBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder>(
                  getTr(),
                  getParentForChildren(),
                  isClean());
          tr_ = null;
        }
        return trBuilder_;
      }

      private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage ms_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder> msBuilder_;
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public boolean hasMs() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage getMs() {
        if (msBuilder_ == null) {
          return ms_;
        } else {
          return msBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public Builder setMs(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage value) {
        if (msBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ms_ = value;
          onChanged();
        } else {
          msBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public Builder setMs(
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder builderForValue) {
        if (msBuilder_ == null) {
          ms_ = builderForValue.build();
          onChanged();
        } else {
          msBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public Builder mergeMs(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage value) {
        if (msBuilder_ == null) {
          if (((bitField0_ & 0x00000004) == 0x00000004) &&
              ms_ != gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance()) {
            ms_ =
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.newBuilder(ms_).mergeFrom(value).buildPartial();
          } else {
            ms_ = value;
          }
          onChanged();
        } else {
          msBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000004;
        return this;
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public Builder clearMs() {
        if (msBuilder_ == null) {
          ms_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance();
          onChanged();
        } else {
          msBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000004);
        return this;
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder getMsBuilder() {
        bitField0_ |= 0x00000004;
        onChanged();
        return getMsFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder getMsOrBuilder() {
        if (msBuilder_ != null) {
          return msBuilder_.getMessageOrBuilder();
        } else {
          return ms_;
        }
      }
      /**
       * <code>optional .proto.MasterMessage ms = 3;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder> 
          getMsFieldBuilder() {
        if (msBuilder_ == null) {
          msBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder>(
                  getMs(),
                  getParentForChildren(),
                  isClean());
          ms_ = null;
        }
        return msBuilder_;
      }

      private gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage ai_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance();
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder> aiBuilder_;
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public boolean hasAi() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage getAi() {
        if (aiBuilder_ == null) {
          return ai_;
        } else {
          return aiBuilder_.getMessage();
        }
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public Builder setAi(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage value) {
        if (aiBuilder_ == null) {
          if (value == null) {
            throw new NullPointerException();
          }
          ai_ = value;
          onChanged();
        } else {
          aiBuilder_.setMessage(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public Builder setAi(
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder builderForValue) {
        if (aiBuilder_ == null) {
          ai_ = builderForValue.build();
          onChanged();
        } else {
          aiBuilder_.setMessage(builderForValue.build());
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public Builder mergeAi(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage value) {
        if (aiBuilder_ == null) {
          if (((bitField0_ & 0x00000008) == 0x00000008) &&
              ai_ != gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance()) {
            ai_ =
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.newBuilder(ai_).mergeFrom(value).buildPartial();
          } else {
            ai_ = value;
          }
          onChanged();
        } else {
          aiBuilder_.mergeFrom(value);
        }
        bitField0_ |= 0x00000008;
        return this;
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public Builder clearAi() {
        if (aiBuilder_ == null) {
          ai_ = gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance();
          onChanged();
        } else {
          aiBuilder_.clear();
        }
        bitField0_ = (bitField0_ & ~0x00000008);
        return this;
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder getAiBuilder() {
        bitField0_ |= 0x00000008;
        onChanged();
        return getAiFieldBuilder().getBuilder();
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder getAiOrBuilder() {
        if (aiBuilder_ != null) {
          return aiBuilder_.getMessageOrBuilder();
        } else {
          return ai_;
        }
      }
      /**
       * <code>optional .proto.AnalogINMessage ai = 4;</code>
       */
      private com.google.protobuf.SingleFieldBuilder<
          gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder> 
          getAiFieldBuilder() {
        if (aiBuilder_ == null) {
          aiBuilder_ = new com.google.protobuf.SingleFieldBuilder<
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder>(
                  getAi(),
                  getParentForChildren(),
                  isClean());
          ai_ = null;
        }
        return aiBuilder_;
      }

      // @@protoc_insertion_point(builder_scope:proto.ThermometryPacket)
    }

    static {
      defaultInstance = new ThermometryPacket(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.ThermometryPacket)
  }

  public interface DSPIDMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.DSPIDMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 address = 1;</code>
     */
    boolean hasAddress();
    /**
     * <code>optional int32 address = 1;</code>
     */
    int getAddress();

    /**
     * <code>optional string boardType = 2;</code>
     */
    boolean hasBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    java.lang.String getBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    com.google.protobuf.ByteString
        getBoardTypeBytes();

    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    boolean hasFrameCounter();
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    int getFrameCounter();

    /**
     * <code>optional string tMux = 4;</code>
     */
    boolean hasTMux();
    /**
     * <code>optional string tMux = 4;</code>
     */
    java.lang.String getTMux();
    /**
     * <code>optional string tMux = 4;</code>
     */
    com.google.protobuf.ByteString
        getTMuxBytes();

    /**
     * <code>optional int32 status = 5;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional int32 status = 5;</code>
     */
    int getStatus();

    /**
     * <code>repeated float demod = 6;</code>
     */
    java.util.List<java.lang.Float> getDemodList();
    /**
     * <code>repeated float demod = 6;</code>
     */
    int getDemodCount();
    /**
     * <code>repeated float demod = 6;</code>
     */
    float getDemod(int index);

    /**
     * <code>optional float aDac = 7;</code>
     */
    boolean hasADac();
    /**
     * <code>optional float aDac = 7;</code>
     */
    float getADac();

    /**
     * <code>optional int32 gDac = 8;</code>
     */
    boolean hasGDac();
    /**
     * <code>optional int32 gDac = 8;</code>
     */
    int getGDac();

    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    java.util.List<java.lang.Float> getCoilDACList();
    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    int getCoilDACCount();
    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    float getCoilDAC(int index);

    /**
     * <code>optional float coilVMon = 10;</code>
     */
    boolean hasCoilVMon();
    /**
     * <code>optional float coilVMon = 10;</code>
     */
    float getCoilVMon();

    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    java.util.List<java.lang.Float> getCoilIsenseList();
    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    int getCoilIsenseCount();
    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    float getCoilIsense(int index);

    /**
     * <code>optional float analogIn = 12;</code>
     */
    boolean hasAnalogIn();
    /**
     * <code>optional float analogIn = 12;</code>
     */
    float getAnalogIn();

    /**
     * <code>optional float vsupply = 13;</code>
     */
    boolean hasVsupply();
    /**
     * <code>optional float vsupply = 13;</code>
     */
    float getVsupply();

    /**
     * <code>optional float gnd = 14;</code>
     */
    boolean hasGnd();
    /**
     * <code>optional float gnd = 14;</code>
     */
    float getGnd();

    /**
     * <code>optional float boardTemp = 15;</code>
     */
    boolean hasBoardTemp();
    /**
     * <code>optional float boardTemp = 15;</code>
     */
    float getBoardTemp();

    /**
     * <code>optional float externalTemp = 16;</code>
     */
    boolean hasExternalTemp();
    /**
     * <code>optional float externalTemp = 16;</code>
     */
    float getExternalTemp();

    /**
     * <code>repeated float analogOut = 17;</code>
     */
    java.util.List<java.lang.Float> getAnalogOutList();
    /**
     * <code>repeated float analogOut = 17;</code>
     */
    int getAnalogOutCount();
    /**
     * <code>repeated float analogOut = 17;</code>
     */
    float getAnalogOut(int index);

    /**
     * <code>optional float pidSetPoint = 18;</code>
     */
    boolean hasPidSetPoint();
    /**
     * <code>optional float pidSetPoint = 18;</code>
     */
    float getPidSetPoint();

    /**
     * <code>optional int32 pidError = 19;</code>
     */
    boolean hasPidError();
    /**
     * <code>optional int32 pidError = 19;</code>
     */
    int getPidError();

    /**
     * <code>optional int32 pidAccumulator = 20;</code>
     */
    boolean hasPidAccumulator();
    /**
     * <code>optional int32 pidAccumulator = 20;</code>
     */
    int getPidAccumulator();

    /**
     * <code>optional int32 pidP = 21;</code>
     */
    boolean hasPidP();
    /**
     * <code>optional int32 pidP = 21;</code>
     */
    int getPidP();

    /**
     * <code>optional int32 pidI = 22;</code>
     */
    boolean hasPidI();
    /**
     * <code>optional int32 pidI = 22;</code>
     */
    int getPidI();

    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    java.util.List<java.lang.Integer> getDemodRawList();
    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    int getDemodRawCount();
    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    int getDemodRaw(int index);

    /**
     * <code>optional int32 aDacRaw = 24;</code>
     */
    boolean hasADacRaw();
    /**
     * <code>optional int32 aDacRaw = 24;</code>
     */
    int getADacRaw();

    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    java.util.List<java.lang.Integer> getCoilDACRawList();
    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    int getCoilDACRawCount();
    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    int getCoilDACRaw(int index);

    /**
     * <code>optional int32 coilVMonRaw = 26;</code>
     */
    boolean hasCoilVMonRaw();
    /**
     * <code>optional int32 coilVMonRaw = 26;</code>
     */
    int getCoilVMonRaw();

    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    java.util.List<java.lang.Integer> getCoilIsenseRawList();
    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    int getCoilIsenseRawCount();
    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    int getCoilIsenseRaw(int index);

    /**
     * <code>optional int32 analogInRaw = 28;</code>
     */
    boolean hasAnalogInRaw();
    /**
     * <code>optional int32 analogInRaw = 28;</code>
     */
    int getAnalogInRaw();

    /**
     * <code>optional int32 vsupplyRaw = 29;</code>
     */
    boolean hasVsupplyRaw();
    /**
     * <code>optional int32 vsupplyRaw = 29;</code>
     */
    int getVsupplyRaw();

    /**
     * <code>optional int32 gndRaw = 30;</code>
     */
    boolean hasGndRaw();
    /**
     * <code>optional int32 gndRaw = 30;</code>
     */
    int getGndRaw();

    /**
     * <code>optional int32 boardTempRaw = 31;</code>
     */
    boolean hasBoardTempRaw();
    /**
     * <code>optional int32 boardTempRaw = 31;</code>
     */
    int getBoardTempRaw();

    /**
     * <code>optional int32 externalTempRaw = 32;</code>
     */
    boolean hasExternalTempRaw();
    /**
     * <code>optional int32 externalTempRaw = 32;</code>
     */
    int getExternalTempRaw();

    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    java.util.List<java.lang.Integer> getAnalogOutRawList();
    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    int getAnalogOutRawCount();
    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    int getAnalogOutRaw(int index);

    /**
     * <code>optional int32 pidSetPointRaw = 34;</code>
     */
    boolean hasPidSetPointRaw();
    /**
     * <code>optional int32 pidSetPointRaw = 34;</code>
     */
    int getPidSetPointRaw();
  }
  /**
   * Protobuf type {@code proto.DSPIDMessage}
   */
  public static final class DSPIDMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.DSPIDMessage)
      DSPIDMessageOrBuilder {
    // Use DSPIDMessage.newBuilder() to construct.
    private DSPIDMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private DSPIDMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final DSPIDMessage defaultInstance;
    public static DSPIDMessage getDefaultInstance() {
      return defaultInstance;
    }

    public DSPIDMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private DSPIDMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      int mutable_bitField1_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              address_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              boardType_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              frameCounter_ = input.readInt32();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              tMux_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              status_ = input.readInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                demod_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              demod_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                demod_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                demod_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 61: {
              bitField0_ |= 0x00000020;
              aDac_ = input.readFloat();
              break;
            }
            case 64: {
              bitField0_ |= 0x00000040;
              gDac_ = input.readInt32();
              break;
            }
            case 77: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                coilDAC_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000100;
              }
              coilDAC_.add(input.readFloat());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                coilDAC_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                coilDAC_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 85: {
              bitField0_ |= 0x00000080;
              coilVMon_ = input.readFloat();
              break;
            }
            case 93: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                coilIsense_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              coilIsense_.add(input.readFloat());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                coilIsense_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                coilIsense_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 101: {
              bitField0_ |= 0x00000100;
              analogIn_ = input.readFloat();
              break;
            }
            case 109: {
              bitField0_ |= 0x00000200;
              vsupply_ = input.readFloat();
              break;
            }
            case 117: {
              bitField0_ |= 0x00000400;
              gnd_ = input.readFloat();
              break;
            }
            case 125: {
              bitField0_ |= 0x00000800;
              boardTemp_ = input.readFloat();
              break;
            }
            case 133: {
              bitField0_ |= 0x00001000;
              externalTemp_ = input.readFloat();
              break;
            }
            case 141: {
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
                analogOut_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00010000;
              }
              analogOut_.add(input.readFloat());
              break;
            }
            case 138: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00010000) == 0x00010000) && input.getBytesUntilLimit() > 0) {
                analogOut_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00010000;
              }
              while (input.getBytesUntilLimit() > 0) {
                analogOut_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 149: {
              bitField0_ |= 0x00002000;
              pidSetPoint_ = input.readFloat();
              break;
            }
            case 152: {
              bitField0_ |= 0x00004000;
              pidError_ = input.readInt32();
              break;
            }
            case 160: {
              bitField0_ |= 0x00008000;
              pidAccumulator_ = input.readInt32();
              break;
            }
            case 168: {
              bitField0_ |= 0x00010000;
              pidP_ = input.readInt32();
              break;
            }
            case 176: {
              bitField0_ |= 0x00020000;
              pidI_ = input.readInt32();
              break;
            }
            case 184: {
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
                demodRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              demodRaw_.add(input.readInt32());
              break;
            }
            case 186: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00400000) == 0x00400000) && input.getBytesUntilLimit() > 0) {
                demodRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00400000;
              }
              while (input.getBytesUntilLimit() > 0) {
                demodRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 192: {
              bitField0_ |= 0x00040000;
              aDacRaw_ = input.readInt32();
              break;
            }
            case 200: {
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
                coilDACRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              coilDACRaw_.add(input.readInt32());
              break;
            }
            case 202: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x01000000) == 0x01000000) && input.getBytesUntilLimit() > 0) {
                coilDACRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x01000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                coilDACRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 208: {
              bitField0_ |= 0x00080000;
              coilVMonRaw_ = input.readInt32();
              break;
            }
            case 216: {
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
                coilIsenseRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              coilIsenseRaw_.add(input.readInt32());
              break;
            }
            case 218: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x04000000) == 0x04000000) && input.getBytesUntilLimit() > 0) {
                coilIsenseRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x04000000;
              }
              while (input.getBytesUntilLimit() > 0) {
                coilIsenseRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 224: {
              bitField0_ |= 0x00100000;
              analogInRaw_ = input.readInt32();
              break;
            }
            case 232: {
              bitField0_ |= 0x00200000;
              vsupplyRaw_ = input.readInt32();
              break;
            }
            case 240: {
              bitField0_ |= 0x00400000;
              gndRaw_ = input.readInt32();
              break;
            }
            case 248: {
              bitField0_ |= 0x00800000;
              boardTempRaw_ = input.readInt32();
              break;
            }
            case 256: {
              bitField0_ |= 0x01000000;
              externalTempRaw_ = input.readInt32();
              break;
            }
            case 264: {
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
                analogOutRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              analogOutRaw_.add(input.readInt32());
              break;
            }
            case 266: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField1_ & 0x00000001) == 0x00000001) && input.getBytesUntilLimit() > 0) {
                analogOutRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField1_ |= 0x00000001;
              }
              while (input.getBytesUntilLimit() > 0) {
                analogOutRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 272: {
              bitField0_ |= 0x02000000;
              pidSetPointRaw_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = java.util.Collections.unmodifiableList(demod_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          coilDAC_ = java.util.Collections.unmodifiableList(coilDAC_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          coilIsense_ = java.util.Collections.unmodifiableList(coilIsense_);
        }
        if (((mutable_bitField0_ & 0x00010000) == 0x00010000)) {
          analogOut_ = java.util.Collections.unmodifiableList(analogOut_);
        }
        if (((mutable_bitField0_ & 0x00400000) == 0x00400000)) {
          demodRaw_ = java.util.Collections.unmodifiableList(demodRaw_);
        }
        if (((mutable_bitField0_ & 0x01000000) == 0x01000000)) {
          coilDACRaw_ = java.util.Collections.unmodifiableList(coilDACRaw_);
        }
        if (((mutable_bitField0_ & 0x04000000) == 0x04000000)) {
          coilIsenseRaw_ = java.util.Collections.unmodifiableList(coilIsenseRaw_);
        }
        if (((mutable_bitField1_ & 0x00000001) == 0x00000001)) {
          analogOutRaw_ = java.util.Collections.unmodifiableList(analogOutRaw_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_DSPIDMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_DSPIDMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<DSPIDMessage> PARSER =
        new com.google.protobuf.AbstractParser<DSPIDMessage>() {
      public DSPIDMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new DSPIDMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<DSPIDMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private int address_;
    /**
     * <code>optional int32 address = 1;</code>
     */
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 address = 1;</code>
     */
    public int getAddress() {
      return address_;
    }

    public static final int BOARDTYPE_FIELD_NUMBER = 2;
    private java.lang.Object boardType_;
    /**
     * <code>optional string boardType = 2;</code>
     */
    public boolean hasBoardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public java.lang.String getBoardType() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          boardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBoardTypeBytes() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRAMECOUNTER_FIELD_NUMBER = 3;
    private int frameCounter_;
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public boolean hasFrameCounter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public int getFrameCounter() {
      return frameCounter_;
    }

    public static final int TMUX_FIELD_NUMBER = 4;
    private java.lang.Object tMux_;
    /**
     * <code>optional string tMux = 4;</code>
     */
    public boolean hasTMux() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string tMux = 4;</code>
     */
    public java.lang.String getTMux() {
      java.lang.Object ref = tMux_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tMux_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string tMux = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTMuxBytes() {
      java.lang.Object ref = tMux_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tMux_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private int status_;
    /**
     * <code>optional int32 status = 5;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 status = 5;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int DEMOD_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> demod_;
    /**
     * <code>repeated float demod = 6;</code>
     */
    public java.util.List<java.lang.Float>
        getDemodList() {
      return demod_;
    }
    /**
     * <code>repeated float demod = 6;</code>
     */
    public int getDemodCount() {
      return demod_.size();
    }
    /**
     * <code>repeated float demod = 6;</code>
     */
    public float getDemod(int index) {
      return demod_.get(index);
    }

    public static final int ADAC_FIELD_NUMBER = 7;
    private float aDac_;
    /**
     * <code>optional float aDac = 7;</code>
     */
    public boolean hasADac() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional float aDac = 7;</code>
     */
    public float getADac() {
      return aDac_;
    }

    public static final int GDAC_FIELD_NUMBER = 8;
    private int gDac_;
    /**
     * <code>optional int32 gDac = 8;</code>
     */
    public boolean hasGDac() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 gDac = 8;</code>
     */
    public int getGDac() {
      return gDac_;
    }

    public static final int COILDAC_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Float> coilDAC_;
    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    public java.util.List<java.lang.Float>
        getCoilDACList() {
      return coilDAC_;
    }
    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    public int getCoilDACCount() {
      return coilDAC_.size();
    }
    /**
     * <code>repeated float coilDAC = 9;</code>
     */
    public float getCoilDAC(int index) {
      return coilDAC_.get(index);
    }

    public static final int COILVMON_FIELD_NUMBER = 10;
    private float coilVMon_;
    /**
     * <code>optional float coilVMon = 10;</code>
     */
    public boolean hasCoilVMon() {
      return ((bitField0_ & 0x00000080) == 0x00000080);
    }
    /**
     * <code>optional float coilVMon = 10;</code>
     */
    public float getCoilVMon() {
      return coilVMon_;
    }

    public static final int COILISENSE_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Float> coilIsense_;
    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    public java.util.List<java.lang.Float>
        getCoilIsenseList() {
      return coilIsense_;
    }
    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    public int getCoilIsenseCount() {
      return coilIsense_.size();
    }
    /**
     * <code>repeated float coilIsense = 11;</code>
     */
    public float getCoilIsense(int index) {
      return coilIsense_.get(index);
    }

    public static final int ANALOGIN_FIELD_NUMBER = 12;
    private float analogIn_;
    /**
     * <code>optional float analogIn = 12;</code>
     */
    public boolean hasAnalogIn() {
      return ((bitField0_ & 0x00000100) == 0x00000100);
    }
    /**
     * <code>optional float analogIn = 12;</code>
     */
    public float getAnalogIn() {
      return analogIn_;
    }

    public static final int VSUPPLY_FIELD_NUMBER = 13;
    private float vsupply_;
    /**
     * <code>optional float vsupply = 13;</code>
     */
    public boolean hasVsupply() {
      return ((bitField0_ & 0x00000200) == 0x00000200);
    }
    /**
     * <code>optional float vsupply = 13;</code>
     */
    public float getVsupply() {
      return vsupply_;
    }

    public static final int GND_FIELD_NUMBER = 14;
    private float gnd_;
    /**
     * <code>optional float gnd = 14;</code>
     */
    public boolean hasGnd() {
      return ((bitField0_ & 0x00000400) == 0x00000400);
    }
    /**
     * <code>optional float gnd = 14;</code>
     */
    public float getGnd() {
      return gnd_;
    }

    public static final int BOARDTEMP_FIELD_NUMBER = 15;
    private float boardTemp_;
    /**
     * <code>optional float boardTemp = 15;</code>
     */
    public boolean hasBoardTemp() {
      return ((bitField0_ & 0x00000800) == 0x00000800);
    }
    /**
     * <code>optional float boardTemp = 15;</code>
     */
    public float getBoardTemp() {
      return boardTemp_;
    }

    public static final int EXTERNALTEMP_FIELD_NUMBER = 16;
    private float externalTemp_;
    /**
     * <code>optional float externalTemp = 16;</code>
     */
    public boolean hasExternalTemp() {
      return ((bitField0_ & 0x00001000) == 0x00001000);
    }
    /**
     * <code>optional float externalTemp = 16;</code>
     */
    public float getExternalTemp() {
      return externalTemp_;
    }

    public static final int ANALOGOUT_FIELD_NUMBER = 17;
    private java.util.List<java.lang.Float> analogOut_;
    /**
     * <code>repeated float analogOut = 17;</code>
     */
    public java.util.List<java.lang.Float>
        getAnalogOutList() {
      return analogOut_;
    }
    /**
     * <code>repeated float analogOut = 17;</code>
     */
    public int getAnalogOutCount() {
      return analogOut_.size();
    }
    /**
     * <code>repeated float analogOut = 17;</code>
     */
    public float getAnalogOut(int index) {
      return analogOut_.get(index);
    }

    public static final int PIDSETPOINT_FIELD_NUMBER = 18;
    private float pidSetPoint_;
    /**
     * <code>optional float pidSetPoint = 18;</code>
     */
    public boolean hasPidSetPoint() {
      return ((bitField0_ & 0x00002000) == 0x00002000);
    }
    /**
     * <code>optional float pidSetPoint = 18;</code>
     */
    public float getPidSetPoint() {
      return pidSetPoint_;
    }

    public static final int PIDERROR_FIELD_NUMBER = 19;
    private int pidError_;
    /**
     * <code>optional int32 pidError = 19;</code>
     */
    public boolean hasPidError() {
      return ((bitField0_ & 0x00004000) == 0x00004000);
    }
    /**
     * <code>optional int32 pidError = 19;</code>
     */
    public int getPidError() {
      return pidError_;
    }

    public static final int PIDACCUMULATOR_FIELD_NUMBER = 20;
    private int pidAccumulator_;
    /**
     * <code>optional int32 pidAccumulator = 20;</code>
     */
    public boolean hasPidAccumulator() {
      return ((bitField0_ & 0x00008000) == 0x00008000);
    }
    /**
     * <code>optional int32 pidAccumulator = 20;</code>
     */
    public int getPidAccumulator() {
      return pidAccumulator_;
    }

    public static final int PIDP_FIELD_NUMBER = 21;
    private int pidP_;
    /**
     * <code>optional int32 pidP = 21;</code>
     */
    public boolean hasPidP() {
      return ((bitField0_ & 0x00010000) == 0x00010000);
    }
    /**
     * <code>optional int32 pidP = 21;</code>
     */
    public int getPidP() {
      return pidP_;
    }

    public static final int PIDI_FIELD_NUMBER = 22;
    private int pidI_;
    /**
     * <code>optional int32 pidI = 22;</code>
     */
    public boolean hasPidI() {
      return ((bitField0_ & 0x00020000) == 0x00020000);
    }
    /**
     * <code>optional int32 pidI = 22;</code>
     */
    public int getPidI() {
      return pidI_;
    }

    public static final int DEMODRAW_FIELD_NUMBER = 23;
    private java.util.List<java.lang.Integer> demodRaw_;
    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    public java.util.List<java.lang.Integer>
        getDemodRawList() {
      return demodRaw_;
    }
    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    public int getDemodRawCount() {
      return demodRaw_.size();
    }
    /**
     * <code>repeated int32 demodRaw = 23;</code>
     */
    public int getDemodRaw(int index) {
      return demodRaw_.get(index);
    }

    public static final int ADACRAW_FIELD_NUMBER = 24;
    private int aDacRaw_;
    /**
     * <code>optional int32 aDacRaw = 24;</code>
     */
    public boolean hasADacRaw() {
      return ((bitField0_ & 0x00040000) == 0x00040000);
    }
    /**
     * <code>optional int32 aDacRaw = 24;</code>
     */
    public int getADacRaw() {
      return aDacRaw_;
    }

    public static final int COILDACRAW_FIELD_NUMBER = 25;
    private java.util.List<java.lang.Integer> coilDACRaw_;
    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    public java.util.List<java.lang.Integer>
        getCoilDACRawList() {
      return coilDACRaw_;
    }
    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    public int getCoilDACRawCount() {
      return coilDACRaw_.size();
    }
    /**
     * <code>repeated int32 coilDACRaw = 25;</code>
     */
    public int getCoilDACRaw(int index) {
      return coilDACRaw_.get(index);
    }

    public static final int COILVMONRAW_FIELD_NUMBER = 26;
    private int coilVMonRaw_;
    /**
     * <code>optional int32 coilVMonRaw = 26;</code>
     */
    public boolean hasCoilVMonRaw() {
      return ((bitField0_ & 0x00080000) == 0x00080000);
    }
    /**
     * <code>optional int32 coilVMonRaw = 26;</code>
     */
    public int getCoilVMonRaw() {
      return coilVMonRaw_;
    }

    public static final int COILISENSERAW_FIELD_NUMBER = 27;
    private java.util.List<java.lang.Integer> coilIsenseRaw_;
    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    public java.util.List<java.lang.Integer>
        getCoilIsenseRawList() {
      return coilIsenseRaw_;
    }
    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    public int getCoilIsenseRawCount() {
      return coilIsenseRaw_.size();
    }
    /**
     * <code>repeated int32 coilIsenseRaw = 27;</code>
     */
    public int getCoilIsenseRaw(int index) {
      return coilIsenseRaw_.get(index);
    }

    public static final int ANALOGINRAW_FIELD_NUMBER = 28;
    private int analogInRaw_;
    /**
     * <code>optional int32 analogInRaw = 28;</code>
     */
    public boolean hasAnalogInRaw() {
      return ((bitField0_ & 0x00100000) == 0x00100000);
    }
    /**
     * <code>optional int32 analogInRaw = 28;</code>
     */
    public int getAnalogInRaw() {
      return analogInRaw_;
    }

    public static final int VSUPPLYRAW_FIELD_NUMBER = 29;
    private int vsupplyRaw_;
    /**
     * <code>optional int32 vsupplyRaw = 29;</code>
     */
    public boolean hasVsupplyRaw() {
      return ((bitField0_ & 0x00200000) == 0x00200000);
    }
    /**
     * <code>optional int32 vsupplyRaw = 29;</code>
     */
    public int getVsupplyRaw() {
      return vsupplyRaw_;
    }

    public static final int GNDRAW_FIELD_NUMBER = 30;
    private int gndRaw_;
    /**
     * <code>optional int32 gndRaw = 30;</code>
     */
    public boolean hasGndRaw() {
      return ((bitField0_ & 0x00400000) == 0x00400000);
    }
    /**
     * <code>optional int32 gndRaw = 30;</code>
     */
    public int getGndRaw() {
      return gndRaw_;
    }

    public static final int BOARDTEMPRAW_FIELD_NUMBER = 31;
    private int boardTempRaw_;
    /**
     * <code>optional int32 boardTempRaw = 31;</code>
     */
    public boolean hasBoardTempRaw() {
      return ((bitField0_ & 0x00800000) == 0x00800000);
    }
    /**
     * <code>optional int32 boardTempRaw = 31;</code>
     */
    public int getBoardTempRaw() {
      return boardTempRaw_;
    }

    public static final int EXTERNALTEMPRAW_FIELD_NUMBER = 32;
    private int externalTempRaw_;
    /**
     * <code>optional int32 externalTempRaw = 32;</code>
     */
    public boolean hasExternalTempRaw() {
      return ((bitField0_ & 0x01000000) == 0x01000000);
    }
    /**
     * <code>optional int32 externalTempRaw = 32;</code>
     */
    public int getExternalTempRaw() {
      return externalTempRaw_;
    }

    public static final int ANALOGOUTRAW_FIELD_NUMBER = 33;
    private java.util.List<java.lang.Integer> analogOutRaw_;
    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    public java.util.List<java.lang.Integer>
        getAnalogOutRawList() {
      return analogOutRaw_;
    }
    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    public int getAnalogOutRawCount() {
      return analogOutRaw_.size();
    }
    /**
     * <code>repeated int32 analogOutRaw = 33;</code>
     */
    public int getAnalogOutRaw(int index) {
      return analogOutRaw_.get(index);
    }

    public static final int PIDSETPOINTRAW_FIELD_NUMBER = 34;
    private int pidSetPointRaw_;
    /**
     * <code>optional int32 pidSetPointRaw = 34;</code>
     */
    public boolean hasPidSetPointRaw() {
      return ((bitField0_ & 0x02000000) == 0x02000000);
    }
    /**
     * <code>optional int32 pidSetPointRaw = 34;</code>
     */
    public int getPidSetPointRaw() {
      return pidSetPointRaw_;
    }

    private void initFields() {
      address_ = 0;
      boardType_ = "";
      frameCounter_ = 0;
      tMux_ = "";
      status_ = 0;
      demod_ = java.util.Collections.emptyList();
      aDac_ = 0F;
      gDac_ = 0;
      coilDAC_ = java.util.Collections.emptyList();
      coilVMon_ = 0F;
      coilIsense_ = java.util.Collections.emptyList();
      analogIn_ = 0F;
      vsupply_ = 0F;
      gnd_ = 0F;
      boardTemp_ = 0F;
      externalTemp_ = 0F;
      analogOut_ = java.util.Collections.emptyList();
      pidSetPoint_ = 0F;
      pidError_ = 0;
      pidAccumulator_ = 0;
      pidP_ = 0;
      pidI_ = 0;
      demodRaw_ = java.util.Collections.emptyList();
      aDacRaw_ = 0;
      coilDACRaw_ = java.util.Collections.emptyList();
      coilVMonRaw_ = 0;
      coilIsenseRaw_ = java.util.Collections.emptyList();
      analogInRaw_ = 0;
      vsupplyRaw_ = 0;
      gndRaw_ = 0;
      boardTempRaw_ = 0;
      externalTempRaw_ = 0;
      analogOutRaw_ = java.util.Collections.emptyList();
      pidSetPointRaw_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTMuxBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, status_);
      }
      for (int i = 0; i < demod_.size(); i++) {
        output.writeFloat(6, demod_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeFloat(7, aDac_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(8, gDac_);
      }
      for (int i = 0; i < coilDAC_.size(); i++) {
        output.writeFloat(9, coilDAC_.get(i));
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        output.writeFloat(10, coilVMon_);
      }
      for (int i = 0; i < coilIsense_.size(); i++) {
        output.writeFloat(11, coilIsense_.get(i));
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        output.writeFloat(12, analogIn_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        output.writeFloat(13, vsupply_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        output.writeFloat(14, gnd_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        output.writeFloat(15, boardTemp_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        output.writeFloat(16, externalTemp_);
      }
      for (int i = 0; i < analogOut_.size(); i++) {
        output.writeFloat(17, analogOut_.get(i));
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        output.writeFloat(18, pidSetPoint_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        output.writeInt32(19, pidError_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        output.writeInt32(20, pidAccumulator_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        output.writeInt32(21, pidP_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        output.writeInt32(22, pidI_);
      }
      for (int i = 0; i < demodRaw_.size(); i++) {
        output.writeInt32(23, demodRaw_.get(i));
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        output.writeInt32(24, aDacRaw_);
      }
      for (int i = 0; i < coilDACRaw_.size(); i++) {
        output.writeInt32(25, coilDACRaw_.get(i));
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        output.writeInt32(26, coilVMonRaw_);
      }
      for (int i = 0; i < coilIsenseRaw_.size(); i++) {
        output.writeInt32(27, coilIsenseRaw_.get(i));
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        output.writeInt32(28, analogInRaw_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        output.writeInt32(29, vsupplyRaw_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        output.writeInt32(30, gndRaw_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        output.writeInt32(31, boardTempRaw_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        output.writeInt32(32, externalTempRaw_);
      }
      for (int i = 0; i < analogOutRaw_.size(); i++) {
        output.writeInt32(33, analogOutRaw_.get(i));
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        output.writeInt32(34, pidSetPointRaw_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTMuxBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, status_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDemodList().size();
        size += dataSize;
        size += 1 * getDemodList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(7, aDac_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(8, gDac_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getCoilDACList().size();
        size += dataSize;
        size += 1 * getCoilDACList().size();
      }
      if (((bitField0_ & 0x00000080) == 0x00000080)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(10, coilVMon_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getCoilIsenseList().size();
        size += dataSize;
        size += 1 * getCoilIsenseList().size();
      }
      if (((bitField0_ & 0x00000100) == 0x00000100)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(12, analogIn_);
      }
      if (((bitField0_ & 0x00000200) == 0x00000200)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(13, vsupply_);
      }
      if (((bitField0_ & 0x00000400) == 0x00000400)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(14, gnd_);
      }
      if (((bitField0_ & 0x00000800) == 0x00000800)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(15, boardTemp_);
      }
      if (((bitField0_ & 0x00001000) == 0x00001000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(16, externalTemp_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getAnalogOutList().size();
        size += dataSize;
        size += 2 * getAnalogOutList().size();
      }
      if (((bitField0_ & 0x00002000) == 0x00002000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeFloatSize(18, pidSetPoint_);
      }
      if (((bitField0_ & 0x00004000) == 0x00004000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(19, pidError_);
      }
      if (((bitField0_ & 0x00008000) == 0x00008000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(20, pidAccumulator_);
      }
      if (((bitField0_ & 0x00010000) == 0x00010000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(21, pidP_);
      }
      if (((bitField0_ & 0x00020000) == 0x00020000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(22, pidI_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < demodRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(demodRaw_.get(i));
        }
        size += dataSize;
        size += 2 * getDemodRawList().size();
      }
      if (((bitField0_ & 0x00040000) == 0x00040000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(24, aDacRaw_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < coilDACRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(coilDACRaw_.get(i));
        }
        size += dataSize;
        size += 2 * getCoilDACRawList().size();
      }
      if (((bitField0_ & 0x00080000) == 0x00080000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(26, coilVMonRaw_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < coilIsenseRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(coilIsenseRaw_.get(i));
        }
        size += dataSize;
        size += 2 * getCoilIsenseRawList().size();
      }
      if (((bitField0_ & 0x00100000) == 0x00100000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(28, analogInRaw_);
      }
      if (((bitField0_ & 0x00200000) == 0x00200000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(29, vsupplyRaw_);
      }
      if (((bitField0_ & 0x00400000) == 0x00400000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(30, gndRaw_);
      }
      if (((bitField0_ & 0x00800000) == 0x00800000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(31, boardTempRaw_);
      }
      if (((bitField0_ & 0x01000000) == 0x01000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(32, externalTempRaw_);
      }
      {
        int dataSize = 0;
        for (int i = 0; i < analogOutRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(analogOutRaw_.get(i));
        }
        size += dataSize;
        size += 2 * getAnalogOutRawList().size();
      }
      if (((bitField0_ & 0x02000000) == 0x02000000)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(34, pidSetPointRaw_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.DSPIDMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.DSPIDMessage)
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_DSPIDMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_DSPIDMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.Builder.class);
      }

      // Construct using gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        address_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        boardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        frameCounter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tMux_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        demod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        aDac_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000040);
        gDac_ = 0;
        bitField0_ = (bitField0_ & ~0x00000080);
        coilDAC_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        coilVMon_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000200);
        coilIsense_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        analogIn_ = 0F;
        bitField0_ = (bitField0_ & ~0x00000800);
        vsupply_ = 0F;
        bitField0_ = (bitField0_ & ~0x00001000);
        gnd_ = 0F;
        bitField0_ = (bitField0_ & ~0x00002000);
        boardTemp_ = 0F;
        bitField0_ = (bitField0_ & ~0x00004000);
        externalTemp_ = 0F;
        bitField0_ = (bitField0_ & ~0x00008000);
        analogOut_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        pidSetPoint_ = 0F;
        bitField0_ = (bitField0_ & ~0x00020000);
        pidError_ = 0;
        bitField0_ = (bitField0_ & ~0x00040000);
        pidAccumulator_ = 0;
        bitField0_ = (bitField0_ & ~0x00080000);
        pidP_ = 0;
        bitField0_ = (bitField0_ & ~0x00100000);
        pidI_ = 0;
        bitField0_ = (bitField0_ & ~0x00200000);
        demodRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        aDacRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x00800000);
        coilDACRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        coilVMonRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x02000000);
        coilIsenseRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        analogInRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x08000000);
        vsupplyRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x10000000);
        gndRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x20000000);
        boardTempRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x40000000);
        externalTempRaw_ = 0;
        bitField0_ = (bitField0_ & ~0x80000000);
        analogOutRaw_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        pidSetPointRaw_ = 0;
        bitField1_ = (bitField1_ & ~0x00000002);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_DSPIDMessage_descriptor;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage getDefaultInstanceForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance();
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage build() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage buildPartial() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage result = new gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage(this);
        int from_bitField0_ = bitField0_;
        int from_bitField1_ = bitField1_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.address_ = address_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.boardType_ = boardType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.frameCounter_ = frameCounter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tMux_ = tMux_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = java.util.Collections.unmodifiableList(demod_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.demod_ = demod_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000020;
        }
        result.aDac_ = aDac_;
        if (((from_bitField0_ & 0x00000080) == 0x00000080)) {
          to_bitField0_ |= 0x00000040;
        }
        result.gDac_ = gDac_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          coilDAC_ = java.util.Collections.unmodifiableList(coilDAC_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.coilDAC_ = coilDAC_;
        if (((from_bitField0_ & 0x00000200) == 0x00000200)) {
          to_bitField0_ |= 0x00000080;
        }
        result.coilVMon_ = coilVMon_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          coilIsense_ = java.util.Collections.unmodifiableList(coilIsense_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.coilIsense_ = coilIsense_;
        if (((from_bitField0_ & 0x00000800) == 0x00000800)) {
          to_bitField0_ |= 0x00000100;
        }
        result.analogIn_ = analogIn_;
        if (((from_bitField0_ & 0x00001000) == 0x00001000)) {
          to_bitField0_ |= 0x00000200;
        }
        result.vsupply_ = vsupply_;
        if (((from_bitField0_ & 0x00002000) == 0x00002000)) {
          to_bitField0_ |= 0x00000400;
        }
        result.gnd_ = gnd_;
        if (((from_bitField0_ & 0x00004000) == 0x00004000)) {
          to_bitField0_ |= 0x00000800;
        }
        result.boardTemp_ = boardTemp_;
        if (((from_bitField0_ & 0x00008000) == 0x00008000)) {
          to_bitField0_ |= 0x00001000;
        }
        result.externalTemp_ = externalTemp_;
        if (((bitField0_ & 0x00010000) == 0x00010000)) {
          analogOut_ = java.util.Collections.unmodifiableList(analogOut_);
          bitField0_ = (bitField0_ & ~0x00010000);
        }
        result.analogOut_ = analogOut_;
        if (((from_bitField0_ & 0x00020000) == 0x00020000)) {
          to_bitField0_ |= 0x00002000;
        }
        result.pidSetPoint_ = pidSetPoint_;
        if (((from_bitField0_ & 0x00040000) == 0x00040000)) {
          to_bitField0_ |= 0x00004000;
        }
        result.pidError_ = pidError_;
        if (((from_bitField0_ & 0x00080000) == 0x00080000)) {
          to_bitField0_ |= 0x00008000;
        }
        result.pidAccumulator_ = pidAccumulator_;
        if (((from_bitField0_ & 0x00100000) == 0x00100000)) {
          to_bitField0_ |= 0x00010000;
        }
        result.pidP_ = pidP_;
        if (((from_bitField0_ & 0x00200000) == 0x00200000)) {
          to_bitField0_ |= 0x00020000;
        }
        result.pidI_ = pidI_;
        if (((bitField0_ & 0x00400000) == 0x00400000)) {
          demodRaw_ = java.util.Collections.unmodifiableList(demodRaw_);
          bitField0_ = (bitField0_ & ~0x00400000);
        }
        result.demodRaw_ = demodRaw_;
        if (((from_bitField0_ & 0x00800000) == 0x00800000)) {
          to_bitField0_ |= 0x00040000;
        }
        result.aDacRaw_ = aDacRaw_;
        if (((bitField0_ & 0x01000000) == 0x01000000)) {
          coilDACRaw_ = java.util.Collections.unmodifiableList(coilDACRaw_);
          bitField0_ = (bitField0_ & ~0x01000000);
        }
        result.coilDACRaw_ = coilDACRaw_;
        if (((from_bitField0_ & 0x02000000) == 0x02000000)) {
          to_bitField0_ |= 0x00080000;
        }
        result.coilVMonRaw_ = coilVMonRaw_;
        if (((bitField0_ & 0x04000000) == 0x04000000)) {
          coilIsenseRaw_ = java.util.Collections.unmodifiableList(coilIsenseRaw_);
          bitField0_ = (bitField0_ & ~0x04000000);
        }
        result.coilIsenseRaw_ = coilIsenseRaw_;
        if (((from_bitField0_ & 0x08000000) == 0x08000000)) {
          to_bitField0_ |= 0x00100000;
        }
        result.analogInRaw_ = analogInRaw_;
        if (((from_bitField0_ & 0x10000000) == 0x10000000)) {
          to_bitField0_ |= 0x00200000;
        }
        result.vsupplyRaw_ = vsupplyRaw_;
        if (((from_bitField0_ & 0x20000000) == 0x20000000)) {
          to_bitField0_ |= 0x00400000;
        }
        result.gndRaw_ = gndRaw_;
        if (((from_bitField0_ & 0x40000000) == 0x40000000)) {
          to_bitField0_ |= 0x00800000;
        }
        result.boardTempRaw_ = boardTempRaw_;
        if (((from_bitField0_ & 0x80000000) == 0x80000000)) {
          to_bitField0_ |= 0x01000000;
        }
        result.externalTempRaw_ = externalTempRaw_;
        if (((bitField1_ & 0x00000001) == 0x00000001)) {
          analogOutRaw_ = java.util.Collections.unmodifiableList(analogOutRaw_);
          bitField1_ = (bitField1_ & ~0x00000001);
        }
        result.analogOutRaw_ = analogOutRaw_;
        if (((from_bitField1_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x02000000;
        }
        result.pidSetPointRaw_ = pidSetPointRaw_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage) {
          return mergeFrom((gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage other) {
        if (other == gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          setAddress(other.getAddress());
        }
        if (other.hasBoardType()) {
          bitField0_ |= 0x00000002;
          boardType_ = other.boardType_;
          onChanged();
        }
        if (other.hasFrameCounter()) {
          setFrameCounter(other.getFrameCounter());
        }
        if (other.hasTMux()) {
          bitField0_ |= 0x00000008;
          tMux_ = other.tMux_;
          onChanged();
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (!other.demod_.isEmpty()) {
          if (demod_.isEmpty()) {
            demod_ = other.demod_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDemodIsMutable();
            demod_.addAll(other.demod_);
          }
          onChanged();
        }
        if (other.hasADac()) {
          setADac(other.getADac());
        }
        if (other.hasGDac()) {
          setGDac(other.getGDac());
        }
        if (!other.coilDAC_.isEmpty()) {
          if (coilDAC_.isEmpty()) {
            coilDAC_ = other.coilDAC_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureCoilDACIsMutable();
            coilDAC_.addAll(other.coilDAC_);
          }
          onChanged();
        }
        if (other.hasCoilVMon()) {
          setCoilVMon(other.getCoilVMon());
        }
        if (!other.coilIsense_.isEmpty()) {
          if (coilIsense_.isEmpty()) {
            coilIsense_ = other.coilIsense_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureCoilIsenseIsMutable();
            coilIsense_.addAll(other.coilIsense_);
          }
          onChanged();
        }
        if (other.hasAnalogIn()) {
          setAnalogIn(other.getAnalogIn());
        }
        if (other.hasVsupply()) {
          setVsupply(other.getVsupply());
        }
        if (other.hasGnd()) {
          setGnd(other.getGnd());
        }
        if (other.hasBoardTemp()) {
          setBoardTemp(other.getBoardTemp());
        }
        if (other.hasExternalTemp()) {
          setExternalTemp(other.getExternalTemp());
        }
        if (!other.analogOut_.isEmpty()) {
          if (analogOut_.isEmpty()) {
            analogOut_ = other.analogOut_;
            bitField0_ = (bitField0_ & ~0x00010000);
          } else {
            ensureAnalogOutIsMutable();
            analogOut_.addAll(other.analogOut_);
          }
          onChanged();
        }
        if (other.hasPidSetPoint()) {
          setPidSetPoint(other.getPidSetPoint());
        }
        if (other.hasPidError()) {
          setPidError(other.getPidError());
        }
        if (other.hasPidAccumulator()) {
          setPidAccumulator(other.getPidAccumulator());
        }
        if (other.hasPidP()) {
          setPidP(other.getPidP());
        }
        if (other.hasPidI()) {
          setPidI(other.getPidI());
        }
        if (!other.demodRaw_.isEmpty()) {
          if (demodRaw_.isEmpty()) {
            demodRaw_ = other.demodRaw_;
            bitField0_ = (bitField0_ & ~0x00400000);
          } else {
            ensureDemodRawIsMutable();
            demodRaw_.addAll(other.demodRaw_);
          }
          onChanged();
        }
        if (other.hasADacRaw()) {
          setADacRaw(other.getADacRaw());
        }
        if (!other.coilDACRaw_.isEmpty()) {
          if (coilDACRaw_.isEmpty()) {
            coilDACRaw_ = other.coilDACRaw_;
            bitField0_ = (bitField0_ & ~0x01000000);
          } else {
            ensureCoilDACRawIsMutable();
            coilDACRaw_.addAll(other.coilDACRaw_);
          }
          onChanged();
        }
        if (other.hasCoilVMonRaw()) {
          setCoilVMonRaw(other.getCoilVMonRaw());
        }
        if (!other.coilIsenseRaw_.isEmpty()) {
          if (coilIsenseRaw_.isEmpty()) {
            coilIsenseRaw_ = other.coilIsenseRaw_;
            bitField0_ = (bitField0_ & ~0x04000000);
          } else {
            ensureCoilIsenseRawIsMutable();
            coilIsenseRaw_.addAll(other.coilIsenseRaw_);
          }
          onChanged();
        }
        if (other.hasAnalogInRaw()) {
          setAnalogInRaw(other.getAnalogInRaw());
        }
        if (other.hasVsupplyRaw()) {
          setVsupplyRaw(other.getVsupplyRaw());
        }
        if (other.hasGndRaw()) {
          setGndRaw(other.getGndRaw());
        }
        if (other.hasBoardTempRaw()) {
          setBoardTempRaw(other.getBoardTempRaw());
        }
        if (other.hasExternalTempRaw()) {
          setExternalTempRaw(other.getExternalTempRaw());
        }
        if (!other.analogOutRaw_.isEmpty()) {
          if (analogOutRaw_.isEmpty()) {
            analogOutRaw_ = other.analogOutRaw_;
            bitField1_ = (bitField1_ & ~0x00000001);
          } else {
            ensureAnalogOutRawIsMutable();
            analogOutRaw_.addAll(other.analogOutRaw_);
          }
          onChanged();
        }
        if (other.hasPidSetPointRaw()) {
          setPidSetPointRaw(other.getPidSetPointRaw());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.DSPIDMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;
      private int bitField1_;

      private int address_ ;
      /**
       * <code>optional int32 address = 1;</code>
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public int getAddress() {
        return address_;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder setAddress(int value) {
        bitField0_ |= 0x00000001;
        address_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object boardType_ = "";
      /**
       * <code>optional string boardType = 2;</code>
       */
      public boolean hasBoardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public java.lang.String getBoardType() {
        java.lang.Object ref = boardType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            boardType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBoardTypeBytes() {
        java.lang.Object ref = boardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          boardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder clearBoardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        boardType_ = getDefaultInstance().getBoardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }

      private int frameCounter_ ;
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public boolean hasFrameCounter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public int getFrameCounter() {
        return frameCounter_;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder setFrameCounter(int value) {
        bitField0_ |= 0x00000004;
        frameCounter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder clearFrameCounter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frameCounter_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object tMux_ = "";
      /**
       * <code>optional string tMux = 4;</code>
       */
      public boolean hasTMux() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public java.lang.String getTMux() {
        java.lang.Object ref = tMux_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tMux_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTMuxBytes() {
        java.lang.Object ref = tMux_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tMux_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder setTMux(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tMux_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder clearTMux() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tMux_ = getDefaultInstance().getTMux();
        onChanged();
        return this;
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder setTMuxBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tMux_ = value;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <code>optional int32 status = 5;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000010;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> demod_ = java.util.Collections.emptyList();
      private void ensureDemodIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = new java.util.ArrayList<java.lang.Float>(demod_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public java.util.List<java.lang.Float>
          getDemodList() {
        return java.util.Collections.unmodifiableList(demod_);
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public int getDemodCount() {
        return demod_.size();
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public float getDemod(int index) {
        return demod_.get(index);
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder setDemod(
          int index, float value) {
        ensureDemodIsMutable();
        demod_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder addDemod(float value) {
        ensureDemodIsMutable();
        demod_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder addAllDemod(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDemodIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, demod_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder clearDemod() {
        demod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private float aDac_ ;
      /**
       * <code>optional float aDac = 7;</code>
       */
      public boolean hasADac() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional float aDac = 7;</code>
       */
      public float getADac() {
        return aDac_;
      }
      /**
       * <code>optional float aDac = 7;</code>
       */
      public Builder setADac(float value) {
        bitField0_ |= 0x00000040;
        aDac_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float aDac = 7;</code>
       */
      public Builder clearADac() {
        bitField0_ = (bitField0_ & ~0x00000040);
        aDac_ = 0F;
        onChanged();
        return this;
      }

      private int gDac_ ;
      /**
       * <code>optional int32 gDac = 8;</code>
       */
      public boolean hasGDac() {
        return ((bitField0_ & 0x00000080) == 0x00000080);
      }
      /**
       * <code>optional int32 gDac = 8;</code>
       */
      public int getGDac() {
        return gDac_;
      }
      /**
       * <code>optional int32 gDac = 8;</code>
       */
      public Builder setGDac(int value) {
        bitField0_ |= 0x00000080;
        gDac_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gDac = 8;</code>
       */
      public Builder clearGDac() {
        bitField0_ = (bitField0_ & ~0x00000080);
        gDac_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> coilDAC_ = java.util.Collections.emptyList();
      private void ensureCoilDACIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          coilDAC_ = new java.util.ArrayList<java.lang.Float>(coilDAC_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public java.util.List<java.lang.Float>
          getCoilDACList() {
        return java.util.Collections.unmodifiableList(coilDAC_);
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public int getCoilDACCount() {
        return coilDAC_.size();
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public float getCoilDAC(int index) {
        return coilDAC_.get(index);
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public Builder setCoilDAC(
          int index, float value) {
        ensureCoilDACIsMutable();
        coilDAC_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public Builder addCoilDAC(float value) {
        ensureCoilDACIsMutable();
        coilDAC_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public Builder addAllCoilDAC(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureCoilDACIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, coilDAC_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilDAC = 9;</code>
       */
      public Builder clearCoilDAC() {
        coilDAC_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      private float coilVMon_ ;
      /**
       * <code>optional float coilVMon = 10;</code>
       */
      public boolean hasCoilVMon() {
        return ((bitField0_ & 0x00000200) == 0x00000200);
      }
      /**
       * <code>optional float coilVMon = 10;</code>
       */
      public float getCoilVMon() {
        return coilVMon_;
      }
      /**
       * <code>optional float coilVMon = 10;</code>
       */
      public Builder setCoilVMon(float value) {
        bitField0_ |= 0x00000200;
        coilVMon_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float coilVMon = 10;</code>
       */
      public Builder clearCoilVMon() {
        bitField0_ = (bitField0_ & ~0x00000200);
        coilVMon_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> coilIsense_ = java.util.Collections.emptyList();
      private void ensureCoilIsenseIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          coilIsense_ = new java.util.ArrayList<java.lang.Float>(coilIsense_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public java.util.List<java.lang.Float>
          getCoilIsenseList() {
        return java.util.Collections.unmodifiableList(coilIsense_);
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public int getCoilIsenseCount() {
        return coilIsense_.size();
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public float getCoilIsense(int index) {
        return coilIsense_.get(index);
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public Builder setCoilIsense(
          int index, float value) {
        ensureCoilIsenseIsMutable();
        coilIsense_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public Builder addCoilIsense(float value) {
        ensureCoilIsenseIsMutable();
        coilIsense_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public Builder addAllCoilIsense(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureCoilIsenseIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, coilIsense_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float coilIsense = 11;</code>
       */
      public Builder clearCoilIsense() {
        coilIsense_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private float analogIn_ ;
      /**
       * <code>optional float analogIn = 12;</code>
       */
      public boolean hasAnalogIn() {
        return ((bitField0_ & 0x00000800) == 0x00000800);
      }
      /**
       * <code>optional float analogIn = 12;</code>
       */
      public float getAnalogIn() {
        return analogIn_;
      }
      /**
       * <code>optional float analogIn = 12;</code>
       */
      public Builder setAnalogIn(float value) {
        bitField0_ |= 0x00000800;
        analogIn_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float analogIn = 12;</code>
       */
      public Builder clearAnalogIn() {
        bitField0_ = (bitField0_ & ~0x00000800);
        analogIn_ = 0F;
        onChanged();
        return this;
      }

      private float vsupply_ ;
      /**
       * <code>optional float vsupply = 13;</code>
       */
      public boolean hasVsupply() {
        return ((bitField0_ & 0x00001000) == 0x00001000);
      }
      /**
       * <code>optional float vsupply = 13;</code>
       */
      public float getVsupply() {
        return vsupply_;
      }
      /**
       * <code>optional float vsupply = 13;</code>
       */
      public Builder setVsupply(float value) {
        bitField0_ |= 0x00001000;
        vsupply_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float vsupply = 13;</code>
       */
      public Builder clearVsupply() {
        bitField0_ = (bitField0_ & ~0x00001000);
        vsupply_ = 0F;
        onChanged();
        return this;
      }

      private float gnd_ ;
      /**
       * <code>optional float gnd = 14;</code>
       */
      public boolean hasGnd() {
        return ((bitField0_ & 0x00002000) == 0x00002000);
      }
      /**
       * <code>optional float gnd = 14;</code>
       */
      public float getGnd() {
        return gnd_;
      }
      /**
       * <code>optional float gnd = 14;</code>
       */
      public Builder setGnd(float value) {
        bitField0_ |= 0x00002000;
        gnd_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float gnd = 14;</code>
       */
      public Builder clearGnd() {
        bitField0_ = (bitField0_ & ~0x00002000);
        gnd_ = 0F;
        onChanged();
        return this;
      }

      private float boardTemp_ ;
      /**
       * <code>optional float boardTemp = 15;</code>
       */
      public boolean hasBoardTemp() {
        return ((bitField0_ & 0x00004000) == 0x00004000);
      }
      /**
       * <code>optional float boardTemp = 15;</code>
       */
      public float getBoardTemp() {
        return boardTemp_;
      }
      /**
       * <code>optional float boardTemp = 15;</code>
       */
      public Builder setBoardTemp(float value) {
        bitField0_ |= 0x00004000;
        boardTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float boardTemp = 15;</code>
       */
      public Builder clearBoardTemp() {
        bitField0_ = (bitField0_ & ~0x00004000);
        boardTemp_ = 0F;
        onChanged();
        return this;
      }

      private float externalTemp_ ;
      /**
       * <code>optional float externalTemp = 16;</code>
       */
      public boolean hasExternalTemp() {
        return ((bitField0_ & 0x00008000) == 0x00008000);
      }
      /**
       * <code>optional float externalTemp = 16;</code>
       */
      public float getExternalTemp() {
        return externalTemp_;
      }
      /**
       * <code>optional float externalTemp = 16;</code>
       */
      public Builder setExternalTemp(float value) {
        bitField0_ |= 0x00008000;
        externalTemp_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float externalTemp = 16;</code>
       */
      public Builder clearExternalTemp() {
        bitField0_ = (bitField0_ & ~0x00008000);
        externalTemp_ = 0F;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> analogOut_ = java.util.Collections.emptyList();
      private void ensureAnalogOutIsMutable() {
        if (!((bitField0_ & 0x00010000) == 0x00010000)) {
          analogOut_ = new java.util.ArrayList<java.lang.Float>(analogOut_);
          bitField0_ |= 0x00010000;
         }
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public java.util.List<java.lang.Float>
          getAnalogOutList() {
        return java.util.Collections.unmodifiableList(analogOut_);
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public int getAnalogOutCount() {
        return analogOut_.size();
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public float getAnalogOut(int index) {
        return analogOut_.get(index);
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public Builder setAnalogOut(
          int index, float value) {
        ensureAnalogOutIsMutable();
        analogOut_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public Builder addAnalogOut(float value) {
        ensureAnalogOutIsMutable();
        analogOut_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public Builder addAllAnalogOut(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureAnalogOutIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, analogOut_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float analogOut = 17;</code>
       */
      public Builder clearAnalogOut() {
        analogOut_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00010000);
        onChanged();
        return this;
      }

      private float pidSetPoint_ ;
      /**
       * <code>optional float pidSetPoint = 18;</code>
       */
      public boolean hasPidSetPoint() {
        return ((bitField0_ & 0x00020000) == 0x00020000);
      }
      /**
       * <code>optional float pidSetPoint = 18;</code>
       */
      public float getPidSetPoint() {
        return pidSetPoint_;
      }
      /**
       * <code>optional float pidSetPoint = 18;</code>
       */
      public Builder setPidSetPoint(float value) {
        bitField0_ |= 0x00020000;
        pidSetPoint_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional float pidSetPoint = 18;</code>
       */
      public Builder clearPidSetPoint() {
        bitField0_ = (bitField0_ & ~0x00020000);
        pidSetPoint_ = 0F;
        onChanged();
        return this;
      }

      private int pidError_ ;
      /**
       * <code>optional int32 pidError = 19;</code>
       */
      public boolean hasPidError() {
        return ((bitField0_ & 0x00040000) == 0x00040000);
      }
      /**
       * <code>optional int32 pidError = 19;</code>
       */
      public int getPidError() {
        return pidError_;
      }
      /**
       * <code>optional int32 pidError = 19;</code>
       */
      public Builder setPidError(int value) {
        bitField0_ |= 0x00040000;
        pidError_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pidError = 19;</code>
       */
      public Builder clearPidError() {
        bitField0_ = (bitField0_ & ~0x00040000);
        pidError_ = 0;
        onChanged();
        return this;
      }

      private int pidAccumulator_ ;
      /**
       * <code>optional int32 pidAccumulator = 20;</code>
       */
      public boolean hasPidAccumulator() {
        return ((bitField0_ & 0x00080000) == 0x00080000);
      }
      /**
       * <code>optional int32 pidAccumulator = 20;</code>
       */
      public int getPidAccumulator() {
        return pidAccumulator_;
      }
      /**
       * <code>optional int32 pidAccumulator = 20;</code>
       */
      public Builder setPidAccumulator(int value) {
        bitField0_ |= 0x00080000;
        pidAccumulator_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pidAccumulator = 20;</code>
       */
      public Builder clearPidAccumulator() {
        bitField0_ = (bitField0_ & ~0x00080000);
        pidAccumulator_ = 0;
        onChanged();
        return this;
      }

      private int pidP_ ;
      /**
       * <code>optional int32 pidP = 21;</code>
       */
      public boolean hasPidP() {
        return ((bitField0_ & 0x00100000) == 0x00100000);
      }
      /**
       * <code>optional int32 pidP = 21;</code>
       */
      public int getPidP() {
        return pidP_;
      }
      /**
       * <code>optional int32 pidP = 21;</code>
       */
      public Builder setPidP(int value) {
        bitField0_ |= 0x00100000;
        pidP_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pidP = 21;</code>
       */
      public Builder clearPidP() {
        bitField0_ = (bitField0_ & ~0x00100000);
        pidP_ = 0;
        onChanged();
        return this;
      }

      private int pidI_ ;
      /**
       * <code>optional int32 pidI = 22;</code>
       */
      public boolean hasPidI() {
        return ((bitField0_ & 0x00200000) == 0x00200000);
      }
      /**
       * <code>optional int32 pidI = 22;</code>
       */
      public int getPidI() {
        return pidI_;
      }
      /**
       * <code>optional int32 pidI = 22;</code>
       */
      public Builder setPidI(int value) {
        bitField0_ |= 0x00200000;
        pidI_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pidI = 22;</code>
       */
      public Builder clearPidI() {
        bitField0_ = (bitField0_ & ~0x00200000);
        pidI_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> demodRaw_ = java.util.Collections.emptyList();
      private void ensureDemodRawIsMutable() {
        if (!((bitField0_ & 0x00400000) == 0x00400000)) {
          demodRaw_ = new java.util.ArrayList<java.lang.Integer>(demodRaw_);
          bitField0_ |= 0x00400000;
         }
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public java.util.List<java.lang.Integer>
          getDemodRawList() {
        return java.util.Collections.unmodifiableList(demodRaw_);
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public int getDemodRawCount() {
        return demodRaw_.size();
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public int getDemodRaw(int index) {
        return demodRaw_.get(index);
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public Builder setDemodRaw(
          int index, int value) {
        ensureDemodRawIsMutable();
        demodRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public Builder addDemodRaw(int value) {
        ensureDemodRawIsMutable();
        demodRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public Builder addAllDemodRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDemodRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, demodRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 23;</code>
       */
      public Builder clearDemodRaw() {
        demodRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00400000);
        onChanged();
        return this;
      }

      private int aDacRaw_ ;
      /**
       * <code>optional int32 aDacRaw = 24;</code>
       */
      public boolean hasADacRaw() {
        return ((bitField0_ & 0x00800000) == 0x00800000);
      }
      /**
       * <code>optional int32 aDacRaw = 24;</code>
       */
      public int getADacRaw() {
        return aDacRaw_;
      }
      /**
       * <code>optional int32 aDacRaw = 24;</code>
       */
      public Builder setADacRaw(int value) {
        bitField0_ |= 0x00800000;
        aDacRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 aDacRaw = 24;</code>
       */
      public Builder clearADacRaw() {
        bitField0_ = (bitField0_ & ~0x00800000);
        aDacRaw_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> coilDACRaw_ = java.util.Collections.emptyList();
      private void ensureCoilDACRawIsMutable() {
        if (!((bitField0_ & 0x01000000) == 0x01000000)) {
          coilDACRaw_ = new java.util.ArrayList<java.lang.Integer>(coilDACRaw_);
          bitField0_ |= 0x01000000;
         }
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public java.util.List<java.lang.Integer>
          getCoilDACRawList() {
        return java.util.Collections.unmodifiableList(coilDACRaw_);
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public int getCoilDACRawCount() {
        return coilDACRaw_.size();
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public int getCoilDACRaw(int index) {
        return coilDACRaw_.get(index);
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public Builder setCoilDACRaw(
          int index, int value) {
        ensureCoilDACRawIsMutable();
        coilDACRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public Builder addCoilDACRaw(int value) {
        ensureCoilDACRawIsMutable();
        coilDACRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public Builder addAllCoilDACRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCoilDACRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, coilDACRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilDACRaw = 25;</code>
       */
      public Builder clearCoilDACRaw() {
        coilDACRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x01000000);
        onChanged();
        return this;
      }

      private int coilVMonRaw_ ;
      /**
       * <code>optional int32 coilVMonRaw = 26;</code>
       */
      public boolean hasCoilVMonRaw() {
        return ((bitField0_ & 0x02000000) == 0x02000000);
      }
      /**
       * <code>optional int32 coilVMonRaw = 26;</code>
       */
      public int getCoilVMonRaw() {
        return coilVMonRaw_;
      }
      /**
       * <code>optional int32 coilVMonRaw = 26;</code>
       */
      public Builder setCoilVMonRaw(int value) {
        bitField0_ |= 0x02000000;
        coilVMonRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 coilVMonRaw = 26;</code>
       */
      public Builder clearCoilVMonRaw() {
        bitField0_ = (bitField0_ & ~0x02000000);
        coilVMonRaw_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> coilIsenseRaw_ = java.util.Collections.emptyList();
      private void ensureCoilIsenseRawIsMutable() {
        if (!((bitField0_ & 0x04000000) == 0x04000000)) {
          coilIsenseRaw_ = new java.util.ArrayList<java.lang.Integer>(coilIsenseRaw_);
          bitField0_ |= 0x04000000;
         }
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public java.util.List<java.lang.Integer>
          getCoilIsenseRawList() {
        return java.util.Collections.unmodifiableList(coilIsenseRaw_);
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public int getCoilIsenseRawCount() {
        return coilIsenseRaw_.size();
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public int getCoilIsenseRaw(int index) {
        return coilIsenseRaw_.get(index);
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public Builder setCoilIsenseRaw(
          int index, int value) {
        ensureCoilIsenseRawIsMutable();
        coilIsenseRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public Builder addCoilIsenseRaw(int value) {
        ensureCoilIsenseRawIsMutable();
        coilIsenseRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public Builder addAllCoilIsenseRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureCoilIsenseRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, coilIsenseRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 coilIsenseRaw = 27;</code>
       */
      public Builder clearCoilIsenseRaw() {
        coilIsenseRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x04000000);
        onChanged();
        return this;
      }

      private int analogInRaw_ ;
      /**
       * <code>optional int32 analogInRaw = 28;</code>
       */
      public boolean hasAnalogInRaw() {
        return ((bitField0_ & 0x08000000) == 0x08000000);
      }
      /**
       * <code>optional int32 analogInRaw = 28;</code>
       */
      public int getAnalogInRaw() {
        return analogInRaw_;
      }
      /**
       * <code>optional int32 analogInRaw = 28;</code>
       */
      public Builder setAnalogInRaw(int value) {
        bitField0_ |= 0x08000000;
        analogInRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 analogInRaw = 28;</code>
       */
      public Builder clearAnalogInRaw() {
        bitField0_ = (bitField0_ & ~0x08000000);
        analogInRaw_ = 0;
        onChanged();
        return this;
      }

      private int vsupplyRaw_ ;
      /**
       * <code>optional int32 vsupplyRaw = 29;</code>
       */
      public boolean hasVsupplyRaw() {
        return ((bitField0_ & 0x10000000) == 0x10000000);
      }
      /**
       * <code>optional int32 vsupplyRaw = 29;</code>
       */
      public int getVsupplyRaw() {
        return vsupplyRaw_;
      }
      /**
       * <code>optional int32 vsupplyRaw = 29;</code>
       */
      public Builder setVsupplyRaw(int value) {
        bitField0_ |= 0x10000000;
        vsupplyRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 vsupplyRaw = 29;</code>
       */
      public Builder clearVsupplyRaw() {
        bitField0_ = (bitField0_ & ~0x10000000);
        vsupplyRaw_ = 0;
        onChanged();
        return this;
      }

      private int gndRaw_ ;
      /**
       * <code>optional int32 gndRaw = 30;</code>
       */
      public boolean hasGndRaw() {
        return ((bitField0_ & 0x20000000) == 0x20000000);
      }
      /**
       * <code>optional int32 gndRaw = 30;</code>
       */
      public int getGndRaw() {
        return gndRaw_;
      }
      /**
       * <code>optional int32 gndRaw = 30;</code>
       */
      public Builder setGndRaw(int value) {
        bitField0_ |= 0x20000000;
        gndRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gndRaw = 30;</code>
       */
      public Builder clearGndRaw() {
        bitField0_ = (bitField0_ & ~0x20000000);
        gndRaw_ = 0;
        onChanged();
        return this;
      }

      private int boardTempRaw_ ;
      /**
       * <code>optional int32 boardTempRaw = 31;</code>
       */
      public boolean hasBoardTempRaw() {
        return ((bitField0_ & 0x40000000) == 0x40000000);
      }
      /**
       * <code>optional int32 boardTempRaw = 31;</code>
       */
      public int getBoardTempRaw() {
        return boardTempRaw_;
      }
      /**
       * <code>optional int32 boardTempRaw = 31;</code>
       */
      public Builder setBoardTempRaw(int value) {
        bitField0_ |= 0x40000000;
        boardTempRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 boardTempRaw = 31;</code>
       */
      public Builder clearBoardTempRaw() {
        bitField0_ = (bitField0_ & ~0x40000000);
        boardTempRaw_ = 0;
        onChanged();
        return this;
      }

      private int externalTempRaw_ ;
      /**
       * <code>optional int32 externalTempRaw = 32;</code>
       */
      public boolean hasExternalTempRaw() {
        return ((bitField0_ & 0x80000000) == 0x80000000);
      }
      /**
       * <code>optional int32 externalTempRaw = 32;</code>
       */
      public int getExternalTempRaw() {
        return externalTempRaw_;
      }
      /**
       * <code>optional int32 externalTempRaw = 32;</code>
       */
      public Builder setExternalTempRaw(int value) {
        bitField0_ |= 0x80000000;
        externalTempRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 externalTempRaw = 32;</code>
       */
      public Builder clearExternalTempRaw() {
        bitField0_ = (bitField0_ & ~0x80000000);
        externalTempRaw_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> analogOutRaw_ = java.util.Collections.emptyList();
      private void ensureAnalogOutRawIsMutable() {
        if (!((bitField1_ & 0x00000001) == 0x00000001)) {
          analogOutRaw_ = new java.util.ArrayList<java.lang.Integer>(analogOutRaw_);
          bitField1_ |= 0x00000001;
         }
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public java.util.List<java.lang.Integer>
          getAnalogOutRawList() {
        return java.util.Collections.unmodifiableList(analogOutRaw_);
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public int getAnalogOutRawCount() {
        return analogOutRaw_.size();
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public int getAnalogOutRaw(int index) {
        return analogOutRaw_.get(index);
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public Builder setAnalogOutRaw(
          int index, int value) {
        ensureAnalogOutRawIsMutable();
        analogOutRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public Builder addAnalogOutRaw(int value) {
        ensureAnalogOutRawIsMutable();
        analogOutRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public Builder addAllAnalogOutRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureAnalogOutRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, analogOutRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 analogOutRaw = 33;</code>
       */
      public Builder clearAnalogOutRaw() {
        analogOutRaw_ = java.util.Collections.emptyList();
        bitField1_ = (bitField1_ & ~0x00000001);
        onChanged();
        return this;
      }

      private int pidSetPointRaw_ ;
      /**
       * <code>optional int32 pidSetPointRaw = 34;</code>
       */
      public boolean hasPidSetPointRaw() {
        return ((bitField1_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional int32 pidSetPointRaw = 34;</code>
       */
      public int getPidSetPointRaw() {
        return pidSetPointRaw_;
      }
      /**
       * <code>optional int32 pidSetPointRaw = 34;</code>
       */
      public Builder setPidSetPointRaw(int value) {
        bitField1_ |= 0x00000002;
        pidSetPointRaw_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pidSetPointRaw = 34;</code>
       */
      public Builder clearPidSetPointRaw() {
        bitField1_ = (bitField1_ & ~0x00000002);
        pidSetPointRaw_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.DSPIDMessage)
    }

    static {
      defaultInstance = new DSPIDMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.DSPIDMessage)
  }

  public interface TReadMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.TReadMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 address = 1;</code>
     */
    boolean hasAddress();
    /**
     * <code>optional int32 address = 1;</code>
     */
    int getAddress();

    /**
     * <code>optional string boardType = 2;</code>
     */
    boolean hasBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    java.lang.String getBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    com.google.protobuf.ByteString
        getBoardTypeBytes();

    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    boolean hasFrameCounter();
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    int getFrameCounter();

    /**
     * <code>optional string tMux = 4;</code>
     */
    boolean hasTMux();
    /**
     * <code>optional string tMux = 4;</code>
     */
    java.lang.String getTMux();
    /**
     * <code>optional string tMux = 4;</code>
     */
    com.google.protobuf.ByteString
        getTMuxBytes();

    /**
     * <code>optional int32 status = 5;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional int32 status = 5;</code>
     */
    int getStatus();

    /**
     * <code>repeated float demod = 6;</code>
     */
    java.util.List<java.lang.Float> getDemodList();
    /**
     * <code>repeated float demod = 6;</code>
     */
    int getDemodCount();
    /**
     * <code>repeated float demod = 6;</code>
     */
    float getDemod(int index);

    /**
     * <code>repeated float aDac = 7;</code>
     */
    java.util.List<java.lang.Float> getADacList();
    /**
     * <code>repeated float aDac = 7;</code>
     */
    int getADacCount();
    /**
     * <code>repeated float aDac = 7;</code>
     */
    float getADac(int index);

    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    java.util.List<java.lang.Integer> getGDacList();
    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    int getGDacCount();
    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    int getGDac(int index);

    /**
     * <code>optional int32 nsum = 9;</code>
     */
    boolean hasNsum();
    /**
     * <code>optional int32 nsum = 9;</code>
     */
    int getNsum();

    /**
     * <code>repeated float temperature = 10;</code>
     */
    java.util.List<java.lang.Float> getTemperatureList();
    /**
     * <code>repeated float temperature = 10;</code>
     */
    int getTemperatureCount();
    /**
     * <code>repeated float temperature = 10;</code>
     */
    float getTemperature(int index);

    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    java.util.List<java.lang.Integer> getDemodRawList();
    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    int getDemodRawCount();
    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    int getDemodRaw(int index);

    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    java.util.List<java.lang.Integer> getADacRawList();
    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    int getADacRawCount();
    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    int getADacRaw(int index);
  }
  /**
   * Protobuf type {@code proto.TReadMessage}
   */
  public static final class TReadMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.TReadMessage)
      TReadMessageOrBuilder {
    // Use TReadMessage.newBuilder() to construct.
    private TReadMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private TReadMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final TReadMessage defaultInstance;
    public static TReadMessage getDefaultInstance() {
      return defaultInstance;
    }

    public TReadMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private TReadMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              address_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              boardType_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              frameCounter_ = input.readInt32();
              break;
            }
            case 34: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000008;
              tMux_ = bs;
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              status_ = input.readInt32();
              break;
            }
            case 53: {
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
                demod_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              demod_.add(input.readFloat());
              break;
            }
            case 50: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000020) == 0x00000020) && input.getBytesUntilLimit() > 0) {
                demod_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000020;
              }
              while (input.getBytesUntilLimit() > 0) {
                demod_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 61: {
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
                aDac_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              aDac_.add(input.readFloat());
              break;
            }
            case 58: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000040) == 0x00000040) && input.getBytesUntilLimit() > 0) {
                aDac_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000040;
              }
              while (input.getBytesUntilLimit() > 0) {
                aDac_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 64: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                gDac_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              gDac_.add(input.readInt32());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                gDac_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                gDac_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              bitField0_ |= 0x00000020;
              nsum_ = input.readInt32();
              break;
            }
            case 85: {
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
                temperature_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              temperature_.add(input.readFloat());
              break;
            }
            case 82: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000200) == 0x00000200) && input.getBytesUntilLimit() > 0) {
                temperature_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000200;
              }
              while (input.getBytesUntilLimit() > 0) {
                temperature_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 88: {
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
                demodRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              demodRaw_.add(input.readInt32());
              break;
            }
            case 90: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000400) == 0x00000400) && input.getBytesUntilLimit() > 0) {
                demodRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000400;
              }
              while (input.getBytesUntilLimit() > 0) {
                demodRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
            case 96: {
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
                aDacRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              aDacRaw_.add(input.readInt32());
              break;
            }
            case 98: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000800) == 0x00000800) && input.getBytesUntilLimit() > 0) {
                aDacRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000800;
              }
              while (input.getBytesUntilLimit() > 0) {
                aDacRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = java.util.Collections.unmodifiableList(demod_);
        }
        if (((mutable_bitField0_ & 0x00000040) == 0x00000040)) {
          aDac_ = java.util.Collections.unmodifiableList(aDac_);
        }
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          gDac_ = java.util.Collections.unmodifiableList(gDac_);
        }
        if (((mutable_bitField0_ & 0x00000200) == 0x00000200)) {
          temperature_ = java.util.Collections.unmodifiableList(temperature_);
        }
        if (((mutable_bitField0_ & 0x00000400) == 0x00000400)) {
          demodRaw_ = java.util.Collections.unmodifiableList(demodRaw_);
        }
        if (((mutable_bitField0_ & 0x00000800) == 0x00000800)) {
          aDacRaw_ = java.util.Collections.unmodifiableList(aDacRaw_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_TReadMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_TReadMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<TReadMessage> PARSER =
        new com.google.protobuf.AbstractParser<TReadMessage>() {
      public TReadMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new TReadMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<TReadMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private int address_;
    /**
     * <code>optional int32 address = 1;</code>
     */
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 address = 1;</code>
     */
    public int getAddress() {
      return address_;
    }

    public static final int BOARDTYPE_FIELD_NUMBER = 2;
    private java.lang.Object boardType_;
    /**
     * <code>optional string boardType = 2;</code>
     */
    public boolean hasBoardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public java.lang.String getBoardType() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          boardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBoardTypeBytes() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRAMECOUNTER_FIELD_NUMBER = 3;
    private int frameCounter_;
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public boolean hasFrameCounter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public int getFrameCounter() {
      return frameCounter_;
    }

    public static final int TMUX_FIELD_NUMBER = 4;
    private java.lang.Object tMux_;
    /**
     * <code>optional string tMux = 4;</code>
     */
    public boolean hasTMux() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional string tMux = 4;</code>
     */
    public java.lang.String getTMux() {
      java.lang.Object ref = tMux_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          tMux_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string tMux = 4;</code>
     */
    public com.google.protobuf.ByteString
        getTMuxBytes() {
      java.lang.Object ref = tMux_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        tMux_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private int status_;
    /**
     * <code>optional int32 status = 5;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 status = 5;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int DEMOD_FIELD_NUMBER = 6;
    private java.util.List<java.lang.Float> demod_;
    /**
     * <code>repeated float demod = 6;</code>
     */
    public java.util.List<java.lang.Float>
        getDemodList() {
      return demod_;
    }
    /**
     * <code>repeated float demod = 6;</code>
     */
    public int getDemodCount() {
      return demod_.size();
    }
    /**
     * <code>repeated float demod = 6;</code>
     */
    public float getDemod(int index) {
      return demod_.get(index);
    }

    public static final int ADAC_FIELD_NUMBER = 7;
    private java.util.List<java.lang.Float> aDac_;
    /**
     * <code>repeated float aDac = 7;</code>
     */
    public java.util.List<java.lang.Float>
        getADacList() {
      return aDac_;
    }
    /**
     * <code>repeated float aDac = 7;</code>
     */
    public int getADacCount() {
      return aDac_.size();
    }
    /**
     * <code>repeated float aDac = 7;</code>
     */
    public float getADac(int index) {
      return aDac_.get(index);
    }

    public static final int GDAC_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Integer> gDac_;
    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    public java.util.List<java.lang.Integer>
        getGDacList() {
      return gDac_;
    }
    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    public int getGDacCount() {
      return gDac_.size();
    }
    /**
     * <code>repeated int32 gDac = 8;</code>
     */
    public int getGDac(int index) {
      return gDac_.get(index);
    }

    public static final int NSUM_FIELD_NUMBER = 9;
    private int nsum_;
    /**
     * <code>optional int32 nsum = 9;</code>
     */
    public boolean hasNsum() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 nsum = 9;</code>
     */
    public int getNsum() {
      return nsum_;
    }

    public static final int TEMPERATURE_FIELD_NUMBER = 10;
    private java.util.List<java.lang.Float> temperature_;
    /**
     * <code>repeated float temperature = 10;</code>
     */
    public java.util.List<java.lang.Float>
        getTemperatureList() {
      return temperature_;
    }
    /**
     * <code>repeated float temperature = 10;</code>
     */
    public int getTemperatureCount() {
      return temperature_.size();
    }
    /**
     * <code>repeated float temperature = 10;</code>
     */
    public float getTemperature(int index) {
      return temperature_.get(index);
    }

    public static final int DEMODRAW_FIELD_NUMBER = 11;
    private java.util.List<java.lang.Integer> demodRaw_;
    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    public java.util.List<java.lang.Integer>
        getDemodRawList() {
      return demodRaw_;
    }
    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    public int getDemodRawCount() {
      return demodRaw_.size();
    }
    /**
     * <code>repeated int32 demodRaw = 11;</code>
     */
    public int getDemodRaw(int index) {
      return demodRaw_.get(index);
    }

    public static final int ADACRAW_FIELD_NUMBER = 12;
    private java.util.List<java.lang.Integer> aDacRaw_;
    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    public java.util.List<java.lang.Integer>
        getADacRawList() {
      return aDacRaw_;
    }
    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    public int getADacRawCount() {
      return aDacRaw_.size();
    }
    /**
     * <code>repeated int32 aDacRaw = 12;</code>
     */
    public int getADacRaw(int index) {
      return aDacRaw_.get(index);
    }

    private void initFields() {
      address_ = 0;
      boardType_ = "";
      frameCounter_ = 0;
      tMux_ = "";
      status_ = 0;
      demod_ = java.util.Collections.emptyList();
      aDac_ = java.util.Collections.emptyList();
      gDac_ = java.util.Collections.emptyList();
      nsum_ = 0;
      temperature_ = java.util.Collections.emptyList();
      demodRaw_ = java.util.Collections.emptyList();
      aDacRaw_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeBytes(4, getTMuxBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, status_);
      }
      for (int i = 0; i < demod_.size(); i++) {
        output.writeFloat(6, demod_.get(i));
      }
      for (int i = 0; i < aDac_.size(); i++) {
        output.writeFloat(7, aDac_.get(i));
      }
      for (int i = 0; i < gDac_.size(); i++) {
        output.writeInt32(8, gDac_.get(i));
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(9, nsum_);
      }
      for (int i = 0; i < temperature_.size(); i++) {
        output.writeFloat(10, temperature_.get(i));
      }
      for (int i = 0; i < demodRaw_.size(); i++) {
        output.writeInt32(11, demodRaw_.get(i));
      }
      for (int i = 0; i < aDacRaw_.size(); i++) {
        output.writeInt32(12, aDacRaw_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(4, getTMuxBytes());
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, status_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getDemodList().size();
        size += dataSize;
        size += 1 * getDemodList().size();
      }
      {
        int dataSize = 0;
        dataSize = 4 * getADacList().size();
        size += dataSize;
        size += 1 * getADacList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < gDac_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(gDac_.get(i));
        }
        size += dataSize;
        size += 1 * getGDacList().size();
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(9, nsum_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getTemperatureList().size();
        size += dataSize;
        size += 1 * getTemperatureList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < demodRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(demodRaw_.get(i));
        }
        size += dataSize;
        size += 1 * getDemodRawList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aDacRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aDacRaw_.get(i));
        }
        size += dataSize;
        size += 1 * getADacRawList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.TReadMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.TReadMessage)
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_TReadMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_TReadMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.Builder.class);
      }

      // Construct using gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        address_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        boardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        frameCounter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        tMux_ = "";
        bitField0_ = (bitField0_ & ~0x00000008);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        demod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        aDac_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        gDac_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        nsum_ = 0;
        bitField0_ = (bitField0_ & ~0x00000100);
        temperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        demodRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        aDacRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_TReadMessage_descriptor;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage getDefaultInstanceForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance();
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage build() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage buildPartial() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage result = new gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.address_ = address_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.boardType_ = boardType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.frameCounter_ = frameCounter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.tMux_ = tMux_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        if (((bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = java.util.Collections.unmodifiableList(demod_);
          bitField0_ = (bitField0_ & ~0x00000020);
        }
        result.demod_ = demod_;
        if (((bitField0_ & 0x00000040) == 0x00000040)) {
          aDac_ = java.util.Collections.unmodifiableList(aDac_);
          bitField0_ = (bitField0_ & ~0x00000040);
        }
        result.aDac_ = aDac_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          gDac_ = java.util.Collections.unmodifiableList(gDac_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.gDac_ = gDac_;
        if (((from_bitField0_ & 0x00000100) == 0x00000100)) {
          to_bitField0_ |= 0x00000020;
        }
        result.nsum_ = nsum_;
        if (((bitField0_ & 0x00000200) == 0x00000200)) {
          temperature_ = java.util.Collections.unmodifiableList(temperature_);
          bitField0_ = (bitField0_ & ~0x00000200);
        }
        result.temperature_ = temperature_;
        if (((bitField0_ & 0x00000400) == 0x00000400)) {
          demodRaw_ = java.util.Collections.unmodifiableList(demodRaw_);
          bitField0_ = (bitField0_ & ~0x00000400);
        }
        result.demodRaw_ = demodRaw_;
        if (((bitField0_ & 0x00000800) == 0x00000800)) {
          aDacRaw_ = java.util.Collections.unmodifiableList(aDacRaw_);
          bitField0_ = (bitField0_ & ~0x00000800);
        }
        result.aDacRaw_ = aDacRaw_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage) {
          return mergeFrom((gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage other) {
        if (other == gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          setAddress(other.getAddress());
        }
        if (other.hasBoardType()) {
          bitField0_ |= 0x00000002;
          boardType_ = other.boardType_;
          onChanged();
        }
        if (other.hasFrameCounter()) {
          setFrameCounter(other.getFrameCounter());
        }
        if (other.hasTMux()) {
          bitField0_ |= 0x00000008;
          tMux_ = other.tMux_;
          onChanged();
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (!other.demod_.isEmpty()) {
          if (demod_.isEmpty()) {
            demod_ = other.demod_;
            bitField0_ = (bitField0_ & ~0x00000020);
          } else {
            ensureDemodIsMutable();
            demod_.addAll(other.demod_);
          }
          onChanged();
        }
        if (!other.aDac_.isEmpty()) {
          if (aDac_.isEmpty()) {
            aDac_ = other.aDac_;
            bitField0_ = (bitField0_ & ~0x00000040);
          } else {
            ensureADacIsMutable();
            aDac_.addAll(other.aDac_);
          }
          onChanged();
        }
        if (!other.gDac_.isEmpty()) {
          if (gDac_.isEmpty()) {
            gDac_ = other.gDac_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureGDacIsMutable();
            gDac_.addAll(other.gDac_);
          }
          onChanged();
        }
        if (other.hasNsum()) {
          setNsum(other.getNsum());
        }
        if (!other.temperature_.isEmpty()) {
          if (temperature_.isEmpty()) {
            temperature_ = other.temperature_;
            bitField0_ = (bitField0_ & ~0x00000200);
          } else {
            ensureTemperatureIsMutable();
            temperature_.addAll(other.temperature_);
          }
          onChanged();
        }
        if (!other.demodRaw_.isEmpty()) {
          if (demodRaw_.isEmpty()) {
            demodRaw_ = other.demodRaw_;
            bitField0_ = (bitField0_ & ~0x00000400);
          } else {
            ensureDemodRawIsMutable();
            demodRaw_.addAll(other.demodRaw_);
          }
          onChanged();
        }
        if (!other.aDacRaw_.isEmpty()) {
          if (aDacRaw_.isEmpty()) {
            aDacRaw_ = other.aDacRaw_;
            bitField0_ = (bitField0_ & ~0x00000800);
          } else {
            ensureADacRawIsMutable();
            aDacRaw_.addAll(other.aDacRaw_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.TReadMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int address_ ;
      /**
       * <code>optional int32 address = 1;</code>
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public int getAddress() {
        return address_;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder setAddress(int value) {
        bitField0_ |= 0x00000001;
        address_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object boardType_ = "";
      /**
       * <code>optional string boardType = 2;</code>
       */
      public boolean hasBoardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public java.lang.String getBoardType() {
        java.lang.Object ref = boardType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            boardType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBoardTypeBytes() {
        java.lang.Object ref = boardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          boardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder clearBoardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        boardType_ = getDefaultInstance().getBoardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }

      private int frameCounter_ ;
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public boolean hasFrameCounter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public int getFrameCounter() {
        return frameCounter_;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder setFrameCounter(int value) {
        bitField0_ |= 0x00000004;
        frameCounter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder clearFrameCounter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frameCounter_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object tMux_ = "";
      /**
       * <code>optional string tMux = 4;</code>
       */
      public boolean hasTMux() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public java.lang.String getTMux() {
        java.lang.Object ref = tMux_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            tMux_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public com.google.protobuf.ByteString
          getTMuxBytes() {
        java.lang.Object ref = tMux_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          tMux_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder setTMux(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tMux_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder clearTMux() {
        bitField0_ = (bitField0_ & ~0x00000008);
        tMux_ = getDefaultInstance().getTMux();
        onChanged();
        return this;
      }
      /**
       * <code>optional string tMux = 4;</code>
       */
      public Builder setTMuxBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000008;
        tMux_ = value;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <code>optional int32 status = 5;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000010;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> demod_ = java.util.Collections.emptyList();
      private void ensureDemodIsMutable() {
        if (!((bitField0_ & 0x00000020) == 0x00000020)) {
          demod_ = new java.util.ArrayList<java.lang.Float>(demod_);
          bitField0_ |= 0x00000020;
         }
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public java.util.List<java.lang.Float>
          getDemodList() {
        return java.util.Collections.unmodifiableList(demod_);
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public int getDemodCount() {
        return demod_.size();
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public float getDemod(int index) {
        return demod_.get(index);
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder setDemod(
          int index, float value) {
        ensureDemodIsMutable();
        demod_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder addDemod(float value) {
        ensureDemodIsMutable();
        demod_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder addAllDemod(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureDemodIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, demod_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float demod = 6;</code>
       */
      public Builder clearDemod() {
        demod_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000020);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> aDac_ = java.util.Collections.emptyList();
      private void ensureADacIsMutable() {
        if (!((bitField0_ & 0x00000040) == 0x00000040)) {
          aDac_ = new java.util.ArrayList<java.lang.Float>(aDac_);
          bitField0_ |= 0x00000040;
         }
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public java.util.List<java.lang.Float>
          getADacList() {
        return java.util.Collections.unmodifiableList(aDac_);
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public int getADacCount() {
        return aDac_.size();
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public float getADac(int index) {
        return aDac_.get(index);
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public Builder setADac(
          int index, float value) {
        ensureADacIsMutable();
        aDac_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public Builder addADac(float value) {
        ensureADacIsMutable();
        aDac_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public Builder addAllADac(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureADacIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aDac_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDac = 7;</code>
       */
      public Builder clearADac() {
        aDac_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000040);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> gDac_ = java.util.Collections.emptyList();
      private void ensureGDacIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          gDac_ = new java.util.ArrayList<java.lang.Integer>(gDac_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public java.util.List<java.lang.Integer>
          getGDacList() {
        return java.util.Collections.unmodifiableList(gDac_);
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public int getGDacCount() {
        return gDac_.size();
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public int getGDac(int index) {
        return gDac_.get(index);
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public Builder setGDac(
          int index, int value) {
        ensureGDacIsMutable();
        gDac_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public Builder addGDac(int value) {
        ensureGDacIsMutable();
        gDac_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public Builder addAllGDac(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureGDacIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, gDac_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 gDac = 8;</code>
       */
      public Builder clearGDac() {
        gDac_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private int nsum_ ;
      /**
       * <code>optional int32 nsum = 9;</code>
       */
      public boolean hasNsum() {
        return ((bitField0_ & 0x00000100) == 0x00000100);
      }
      /**
       * <code>optional int32 nsum = 9;</code>
       */
      public int getNsum() {
        return nsum_;
      }
      /**
       * <code>optional int32 nsum = 9;</code>
       */
      public Builder setNsum(int value) {
        bitField0_ |= 0x00000100;
        nsum_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 nsum = 9;</code>
       */
      public Builder clearNsum() {
        bitField0_ = (bitField0_ & ~0x00000100);
        nsum_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> temperature_ = java.util.Collections.emptyList();
      private void ensureTemperatureIsMutable() {
        if (!((bitField0_ & 0x00000200) == 0x00000200)) {
          temperature_ = new java.util.ArrayList<java.lang.Float>(temperature_);
          bitField0_ |= 0x00000200;
         }
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public java.util.List<java.lang.Float>
          getTemperatureList() {
        return java.util.Collections.unmodifiableList(temperature_);
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public int getTemperatureCount() {
        return temperature_.size();
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public float getTemperature(int index) {
        return temperature_.get(index);
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public Builder setTemperature(
          int index, float value) {
        ensureTemperatureIsMutable();
        temperature_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public Builder addTemperature(float value) {
        ensureTemperatureIsMutable();
        temperature_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public Builder addAllTemperature(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureTemperatureIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, temperature_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float temperature = 10;</code>
       */
      public Builder clearTemperature() {
        temperature_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000200);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> demodRaw_ = java.util.Collections.emptyList();
      private void ensureDemodRawIsMutable() {
        if (!((bitField0_ & 0x00000400) == 0x00000400)) {
          demodRaw_ = new java.util.ArrayList<java.lang.Integer>(demodRaw_);
          bitField0_ |= 0x00000400;
         }
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public java.util.List<java.lang.Integer>
          getDemodRawList() {
        return java.util.Collections.unmodifiableList(demodRaw_);
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public int getDemodRawCount() {
        return demodRaw_.size();
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public int getDemodRaw(int index) {
        return demodRaw_.get(index);
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public Builder setDemodRaw(
          int index, int value) {
        ensureDemodRawIsMutable();
        demodRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public Builder addDemodRaw(int value) {
        ensureDemodRawIsMutable();
        demodRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public Builder addAllDemodRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureDemodRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, demodRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 demodRaw = 11;</code>
       */
      public Builder clearDemodRaw() {
        demodRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000400);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> aDacRaw_ = java.util.Collections.emptyList();
      private void ensureADacRawIsMutable() {
        if (!((bitField0_ & 0x00000800) == 0x00000800)) {
          aDacRaw_ = new java.util.ArrayList<java.lang.Integer>(aDacRaw_);
          bitField0_ |= 0x00000800;
         }
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public java.util.List<java.lang.Integer>
          getADacRawList() {
        return java.util.Collections.unmodifiableList(aDacRaw_);
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public int getADacRawCount() {
        return aDacRaw_.size();
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public int getADacRaw(int index) {
        return aDacRaw_.get(index);
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public Builder setADacRaw(
          int index, int value) {
        ensureADacRawIsMutable();
        aDacRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public Builder addADacRaw(int value) {
        ensureADacRawIsMutable();
        aDacRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public Builder addAllADacRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureADacRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aDacRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDacRaw = 12;</code>
       */
      public Builder clearADacRaw() {
        aDacRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000800);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.TReadMessage)
    }

    static {
      defaultInstance = new TReadMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.TReadMessage)
  }

  public interface MasterMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.MasterMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 address = 1;</code>
     */
    boolean hasAddress();
    /**
     * <code>optional int32 address = 1;</code>
     */
    int getAddress();

    /**
     * <code>optional string boardType = 2;</code>
     */
    boolean hasBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    java.lang.String getBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    com.google.protobuf.ByteString
        getBoardTypeBytes();

    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    boolean hasFrameCounter();
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    int getFrameCounter();

    /**
     * <code>optional int32 status = 4;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional int32 status = 4;</code>
     */
    int getStatus();

    /**
     * <code>optional int32 uBCFrameCount = 5;</code>
     */
    boolean hasUBCFrameCount();
    /**
     * <code>optional int32 uBCFrameCount = 5;</code>
     */
    int getUBCFrameCount();

    /**
     * <code>optional int32 pICFrameCount = 6;</code>
     */
    boolean hasPICFrameCount();
    /**
     * <code>optional int32 pICFrameCount = 6;</code>
     */
    int getPICFrameCount();
  }
  /**
   * Protobuf type {@code proto.MasterMessage}
   */
  public static final class MasterMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.MasterMessage)
      MasterMessageOrBuilder {
    // Use MasterMessage.newBuilder() to construct.
    private MasterMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private MasterMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final MasterMessage defaultInstance;
    public static MasterMessage getDefaultInstance() {
      return defaultInstance;
    }

    public MasterMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private MasterMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              address_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              boardType_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              frameCounter_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              status_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              uBCFrameCount_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              pICFrameCount_ = input.readInt32();
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_MasterMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_MasterMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<MasterMessage> PARSER =
        new com.google.protobuf.AbstractParser<MasterMessage>() {
      public MasterMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new MasterMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<MasterMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private int address_;
    /**
     * <code>optional int32 address = 1;</code>
     */
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 address = 1;</code>
     */
    public int getAddress() {
      return address_;
    }

    public static final int BOARDTYPE_FIELD_NUMBER = 2;
    private java.lang.Object boardType_;
    /**
     * <code>optional string boardType = 2;</code>
     */
    public boolean hasBoardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public java.lang.String getBoardType() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          boardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBoardTypeBytes() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRAMECOUNTER_FIELD_NUMBER = 3;
    private int frameCounter_;
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public boolean hasFrameCounter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public int getFrameCounter() {
      return frameCounter_;
    }

    public static final int STATUS_FIELD_NUMBER = 4;
    private int status_;
    /**
     * <code>optional int32 status = 4;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 status = 4;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int UBCFRAMECOUNT_FIELD_NUMBER = 5;
    private int uBCFrameCount_;
    /**
     * <code>optional int32 uBCFrameCount = 5;</code>
     */
    public boolean hasUBCFrameCount() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 uBCFrameCount = 5;</code>
     */
    public int getUBCFrameCount() {
      return uBCFrameCount_;
    }

    public static final int PICFRAMECOUNT_FIELD_NUMBER = 6;
    private int pICFrameCount_;
    /**
     * <code>optional int32 pICFrameCount = 6;</code>
     */
    public boolean hasPICFrameCount() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 pICFrameCount = 6;</code>
     */
    public int getPICFrameCount() {
      return pICFrameCount_;
    }

    private void initFields() {
      address_ = 0;
      boardType_ = "";
      frameCounter_ = 0;
      status_ = 0;
      uBCFrameCount_ = 0;
      pICFrameCount_ = 0;
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, status_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, uBCFrameCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, pICFrameCount_);
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, status_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, uBCFrameCount_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, pICFrameCount_);
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.MasterMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.MasterMessage)
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_MasterMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_MasterMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.Builder.class);
      }

      // Construct using gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        address_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        boardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        frameCounter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        uBCFrameCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        pICFrameCount_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_MasterMessage_descriptor;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage getDefaultInstanceForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance();
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage build() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage buildPartial() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage result = new gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.address_ = address_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.boardType_ = boardType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.frameCounter_ = frameCounter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.uBCFrameCount_ = uBCFrameCount_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.pICFrameCount_ = pICFrameCount_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage) {
          return mergeFrom((gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage other) {
        if (other == gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          setAddress(other.getAddress());
        }
        if (other.hasBoardType()) {
          bitField0_ |= 0x00000002;
          boardType_ = other.boardType_;
          onChanged();
        }
        if (other.hasFrameCounter()) {
          setFrameCounter(other.getFrameCounter());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasUBCFrameCount()) {
          setUBCFrameCount(other.getUBCFrameCount());
        }
        if (other.hasPICFrameCount()) {
          setPICFrameCount(other.getPICFrameCount());
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.MasterMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int address_ ;
      /**
       * <code>optional int32 address = 1;</code>
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public int getAddress() {
        return address_;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder setAddress(int value) {
        bitField0_ |= 0x00000001;
        address_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object boardType_ = "";
      /**
       * <code>optional string boardType = 2;</code>
       */
      public boolean hasBoardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public java.lang.String getBoardType() {
        java.lang.Object ref = boardType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            boardType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBoardTypeBytes() {
        java.lang.Object ref = boardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          boardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder clearBoardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        boardType_ = getDefaultInstance().getBoardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }

      private int frameCounter_ ;
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public boolean hasFrameCounter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public int getFrameCounter() {
        return frameCounter_;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder setFrameCounter(int value) {
        bitField0_ |= 0x00000004;
        frameCounter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder clearFrameCounter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frameCounter_ = 0;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <code>optional int32 status = 4;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 status = 4;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional int32 status = 4;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000008;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 status = 4;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000008);
        status_ = 0;
        onChanged();
        return this;
      }

      private int uBCFrameCount_ ;
      /**
       * <code>optional int32 uBCFrameCount = 5;</code>
       */
      public boolean hasUBCFrameCount() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 uBCFrameCount = 5;</code>
       */
      public int getUBCFrameCount() {
        return uBCFrameCount_;
      }
      /**
       * <code>optional int32 uBCFrameCount = 5;</code>
       */
      public Builder setUBCFrameCount(int value) {
        bitField0_ |= 0x00000010;
        uBCFrameCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 uBCFrameCount = 5;</code>
       */
      public Builder clearUBCFrameCount() {
        bitField0_ = (bitField0_ & ~0x00000010);
        uBCFrameCount_ = 0;
        onChanged();
        return this;
      }

      private int pICFrameCount_ ;
      /**
       * <code>optional int32 pICFrameCount = 6;</code>
       */
      public boolean hasPICFrameCount() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 pICFrameCount = 6;</code>
       */
      public int getPICFrameCount() {
        return pICFrameCount_;
      }
      /**
       * <code>optional int32 pICFrameCount = 6;</code>
       */
      public Builder setPICFrameCount(int value) {
        bitField0_ |= 0x00000020;
        pICFrameCount_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 pICFrameCount = 6;</code>
       */
      public Builder clearPICFrameCount() {
        bitField0_ = (bitField0_ & ~0x00000020);
        pICFrameCount_ = 0;
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.MasterMessage)
    }

    static {
      defaultInstance = new MasterMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.MasterMessage)
  }

  public interface AnalogINMessageOrBuilder extends
      // @@protoc_insertion_point(interface_extends:proto.AnalogINMessage)
      com.google.protobuf.MessageOrBuilder {

    /**
     * <code>optional int32 address = 1;</code>
     */
    boolean hasAddress();
    /**
     * <code>optional int32 address = 1;</code>
     */
    int getAddress();

    /**
     * <code>optional string boardType = 2;</code>
     */
    boolean hasBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    java.lang.String getBoardType();
    /**
     * <code>optional string boardType = 2;</code>
     */
    com.google.protobuf.ByteString
        getBoardTypeBytes();

    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    boolean hasFrameCounter();
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    int getFrameCounter();

    /**
     * <code>optional int32 gain = 4;</code>
     */
    boolean hasGain();
    /**
     * <code>optional int32 gain = 4;</code>
     */
    int getGain();

    /**
     * <code>optional int32 status = 5;</code>
     */
    boolean hasStatus();
    /**
     * <code>optional int32 status = 5;</code>
     */
    int getStatus();

    /**
     * <code>optional int32 samplesPerChannel = 6;</code>
     */
    boolean hasSamplesPerChannel();
    /**
     * <code>optional int32 samplesPerChannel = 6;</code>
     */
    int getSamplesPerChannel();

    /**
     * <code>optional int32 numberOfChannels = 7;</code>
     */
    boolean hasNumberOfChannels();
    /**
     * <code>optional int32 numberOfChannels = 7;</code>
     */
    int getNumberOfChannels();

    /**
     * <code>repeated float aDC = 8;</code>
     */
    java.util.List<java.lang.Float> getADCList();
    /**
     * <code>repeated float aDC = 8;</code>
     */
    int getADCCount();
    /**
     * <code>repeated float aDC = 8;</code>
     */
    float getADC(int index);

    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    java.util.List<java.lang.Integer> getADCRawList();
    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    int getADCRawCount();
    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    int getADCRaw(int index);
  }
  /**
   * Protobuf type {@code proto.AnalogINMessage}
   */
  public static final class AnalogINMessage extends
      com.google.protobuf.GeneratedMessage implements
      // @@protoc_insertion_point(message_implements:proto.AnalogINMessage)
      AnalogINMessageOrBuilder {
    // Use AnalogINMessage.newBuilder() to construct.
    private AnalogINMessage(com.google.protobuf.GeneratedMessage.Builder<?> builder) {
      super(builder);
      this.unknownFields = builder.getUnknownFields();
    }
    private AnalogINMessage(boolean noInit) { this.unknownFields = com.google.protobuf.UnknownFieldSet.getDefaultInstance(); }

    private static final AnalogINMessage defaultInstance;
    public static AnalogINMessage getDefaultInstance() {
      return defaultInstance;
    }

    public AnalogINMessage getDefaultInstanceForType() {
      return defaultInstance;
    }

    private final com.google.protobuf.UnknownFieldSet unknownFields;
    @java.lang.Override
    public final com.google.protobuf.UnknownFieldSet
        getUnknownFields() {
      return this.unknownFields;
    }
    private AnalogINMessage(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      initFields();
      int mutable_bitField0_ = 0;
      com.google.protobuf.UnknownFieldSet.Builder unknownFields =
          com.google.protobuf.UnknownFieldSet.newBuilder();
      try {
        boolean done = false;
        while (!done) {
          int tag = input.readTag();
          switch (tag) {
            case 0:
              done = true;
              break;
            default: {
              if (!parseUnknownField(input, unknownFields,
                                     extensionRegistry, tag)) {
                done = true;
              }
              break;
            }
            case 8: {
              bitField0_ |= 0x00000001;
              address_ = input.readInt32();
              break;
            }
            case 18: {
              com.google.protobuf.ByteString bs = input.readBytes();
              bitField0_ |= 0x00000002;
              boardType_ = bs;
              break;
            }
            case 24: {
              bitField0_ |= 0x00000004;
              frameCounter_ = input.readInt32();
              break;
            }
            case 32: {
              bitField0_ |= 0x00000008;
              gain_ = input.readInt32();
              break;
            }
            case 40: {
              bitField0_ |= 0x00000010;
              status_ = input.readInt32();
              break;
            }
            case 48: {
              bitField0_ |= 0x00000020;
              samplesPerChannel_ = input.readInt32();
              break;
            }
            case 56: {
              bitField0_ |= 0x00000040;
              numberOfChannels_ = input.readInt32();
              break;
            }
            case 69: {
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
                aDC_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000080;
              }
              aDC_.add(input.readFloat());
              break;
            }
            case 66: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000080) == 0x00000080) && input.getBytesUntilLimit() > 0) {
                aDC_ = new java.util.ArrayList<java.lang.Float>();
                mutable_bitField0_ |= 0x00000080;
              }
              while (input.getBytesUntilLimit() > 0) {
                aDC_.add(input.readFloat());
              }
              input.popLimit(limit);
              break;
            }
            case 72: {
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
                aDCRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              aDCRaw_.add(input.readInt32());
              break;
            }
            case 74: {
              int length = input.readRawVarint32();
              int limit = input.pushLimit(length);
              if (!((mutable_bitField0_ & 0x00000100) == 0x00000100) && input.getBytesUntilLimit() > 0) {
                aDCRaw_ = new java.util.ArrayList<java.lang.Integer>();
                mutable_bitField0_ |= 0x00000100;
              }
              while (input.getBytesUntilLimit() > 0) {
                aDCRaw_.add(input.readInt32());
              }
              input.popLimit(limit);
              break;
            }
          }
        }
      } catch (com.google.protobuf.InvalidProtocolBufferException e) {
        throw e.setUnfinishedMessage(this);
      } catch (java.io.IOException e) {
        throw new com.google.protobuf.InvalidProtocolBufferException(
            e.getMessage()).setUnfinishedMessage(this);
      } finally {
        if (((mutable_bitField0_ & 0x00000080) == 0x00000080)) {
          aDC_ = java.util.Collections.unmodifiableList(aDC_);
        }
        if (((mutable_bitField0_ & 0x00000100) == 0x00000100)) {
          aDCRaw_ = java.util.Collections.unmodifiableList(aDCRaw_);
        }
        this.unknownFields = unknownFields.build();
        makeExtensionsImmutable();
      }
    }
    public static final com.google.protobuf.Descriptors.Descriptor
        getDescriptor() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_AnalogINMessage_descriptor;
    }

    protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
        internalGetFieldAccessorTable() {
      return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_AnalogINMessage_fieldAccessorTable
          .ensureFieldAccessorsInitialized(
              gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder.class);
    }

    public static com.google.protobuf.Parser<AnalogINMessage> PARSER =
        new com.google.protobuf.AbstractParser<AnalogINMessage>() {
      public AnalogINMessage parsePartialFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws com.google.protobuf.InvalidProtocolBufferException {
        return new AnalogINMessage(input, extensionRegistry);
      }
    };

    @java.lang.Override
    public com.google.protobuf.Parser<AnalogINMessage> getParserForType() {
      return PARSER;
    }

    private int bitField0_;
    public static final int ADDRESS_FIELD_NUMBER = 1;
    private int address_;
    /**
     * <code>optional int32 address = 1;</code>
     */
    public boolean hasAddress() {
      return ((bitField0_ & 0x00000001) == 0x00000001);
    }
    /**
     * <code>optional int32 address = 1;</code>
     */
    public int getAddress() {
      return address_;
    }

    public static final int BOARDTYPE_FIELD_NUMBER = 2;
    private java.lang.Object boardType_;
    /**
     * <code>optional string boardType = 2;</code>
     */
    public boolean hasBoardType() {
      return ((bitField0_ & 0x00000002) == 0x00000002);
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public java.lang.String getBoardType() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        return (java.lang.String) ref;
      } else {
        com.google.protobuf.ByteString bs = 
            (com.google.protobuf.ByteString) ref;
        java.lang.String s = bs.toStringUtf8();
        if (bs.isValidUtf8()) {
          boardType_ = s;
        }
        return s;
      }
    }
    /**
     * <code>optional string boardType = 2;</code>
     */
    public com.google.protobuf.ByteString
        getBoardTypeBytes() {
      java.lang.Object ref = boardType_;
      if (ref instanceof java.lang.String) {
        com.google.protobuf.ByteString b = 
            com.google.protobuf.ByteString.copyFromUtf8(
                (java.lang.String) ref);
        boardType_ = b;
        return b;
      } else {
        return (com.google.protobuf.ByteString) ref;
      }
    }

    public static final int FRAMECOUNTER_FIELD_NUMBER = 3;
    private int frameCounter_;
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public boolean hasFrameCounter() {
      return ((bitField0_ & 0x00000004) == 0x00000004);
    }
    /**
     * <code>optional int32 frameCounter = 3;</code>
     */
    public int getFrameCounter() {
      return frameCounter_;
    }

    public static final int GAIN_FIELD_NUMBER = 4;
    private int gain_;
    /**
     * <code>optional int32 gain = 4;</code>
     */
    public boolean hasGain() {
      return ((bitField0_ & 0x00000008) == 0x00000008);
    }
    /**
     * <code>optional int32 gain = 4;</code>
     */
    public int getGain() {
      return gain_;
    }

    public static final int STATUS_FIELD_NUMBER = 5;
    private int status_;
    /**
     * <code>optional int32 status = 5;</code>
     */
    public boolean hasStatus() {
      return ((bitField0_ & 0x00000010) == 0x00000010);
    }
    /**
     * <code>optional int32 status = 5;</code>
     */
    public int getStatus() {
      return status_;
    }

    public static final int SAMPLESPERCHANNEL_FIELD_NUMBER = 6;
    private int samplesPerChannel_;
    /**
     * <code>optional int32 samplesPerChannel = 6;</code>
     */
    public boolean hasSamplesPerChannel() {
      return ((bitField0_ & 0x00000020) == 0x00000020);
    }
    /**
     * <code>optional int32 samplesPerChannel = 6;</code>
     */
    public int getSamplesPerChannel() {
      return samplesPerChannel_;
    }

    public static final int NUMBEROFCHANNELS_FIELD_NUMBER = 7;
    private int numberOfChannels_;
    /**
     * <code>optional int32 numberOfChannels = 7;</code>
     */
    public boolean hasNumberOfChannels() {
      return ((bitField0_ & 0x00000040) == 0x00000040);
    }
    /**
     * <code>optional int32 numberOfChannels = 7;</code>
     */
    public int getNumberOfChannels() {
      return numberOfChannels_;
    }

    public static final int ADC_FIELD_NUMBER = 8;
    private java.util.List<java.lang.Float> aDC_;
    /**
     * <code>repeated float aDC = 8;</code>
     */
    public java.util.List<java.lang.Float>
        getADCList() {
      return aDC_;
    }
    /**
     * <code>repeated float aDC = 8;</code>
     */
    public int getADCCount() {
      return aDC_.size();
    }
    /**
     * <code>repeated float aDC = 8;</code>
     */
    public float getADC(int index) {
      return aDC_.get(index);
    }

    public static final int ADCRAW_FIELD_NUMBER = 9;
    private java.util.List<java.lang.Integer> aDCRaw_;
    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    public java.util.List<java.lang.Integer>
        getADCRawList() {
      return aDCRaw_;
    }
    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    public int getADCRawCount() {
      return aDCRaw_.size();
    }
    /**
     * <code>repeated int32 aDCRaw = 9;</code>
     */
    public int getADCRaw(int index) {
      return aDCRaw_.get(index);
    }

    private void initFields() {
      address_ = 0;
      boardType_ = "";
      frameCounter_ = 0;
      gain_ = 0;
      status_ = 0;
      samplesPerChannel_ = 0;
      numberOfChannels_ = 0;
      aDC_ = java.util.Collections.emptyList();
      aDCRaw_ = java.util.Collections.emptyList();
    }
    private byte memoizedIsInitialized = -1;
    public final boolean isInitialized() {
      byte isInitialized = memoizedIsInitialized;
      if (isInitialized == 1) return true;
      if (isInitialized == 0) return false;

      memoizedIsInitialized = 1;
      return true;
    }

    public void writeTo(com.google.protobuf.CodedOutputStream output)
                        throws java.io.IOException {
      getSerializedSize();
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        output.writeInt32(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        output.writeBytes(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        output.writeInt32(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        output.writeInt32(4, gain_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        output.writeInt32(5, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        output.writeInt32(6, samplesPerChannel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        output.writeInt32(7, numberOfChannels_);
      }
      for (int i = 0; i < aDC_.size(); i++) {
        output.writeFloat(8, aDC_.get(i));
      }
      for (int i = 0; i < aDCRaw_.size(); i++) {
        output.writeInt32(9, aDCRaw_.get(i));
      }
      getUnknownFields().writeTo(output);
    }

    private int memoizedSerializedSize = -1;
    public int getSerializedSize() {
      int size = memoizedSerializedSize;
      if (size != -1) return size;

      size = 0;
      if (((bitField0_ & 0x00000001) == 0x00000001)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(1, address_);
      }
      if (((bitField0_ & 0x00000002) == 0x00000002)) {
        size += com.google.protobuf.CodedOutputStream
          .computeBytesSize(2, getBoardTypeBytes());
      }
      if (((bitField0_ & 0x00000004) == 0x00000004)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(3, frameCounter_);
      }
      if (((bitField0_ & 0x00000008) == 0x00000008)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(4, gain_);
      }
      if (((bitField0_ & 0x00000010) == 0x00000010)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(5, status_);
      }
      if (((bitField0_ & 0x00000020) == 0x00000020)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(6, samplesPerChannel_);
      }
      if (((bitField0_ & 0x00000040) == 0x00000040)) {
        size += com.google.protobuf.CodedOutputStream
          .computeInt32Size(7, numberOfChannels_);
      }
      {
        int dataSize = 0;
        dataSize = 4 * getADCList().size();
        size += dataSize;
        size += 1 * getADCList().size();
      }
      {
        int dataSize = 0;
        for (int i = 0; i < aDCRaw_.size(); i++) {
          dataSize += com.google.protobuf.CodedOutputStream
            .computeInt32SizeNoTag(aDCRaw_.get(i));
        }
        size += dataSize;
        size += 1 * getADCRawList().size();
      }
      size += getUnknownFields().getSerializedSize();
      memoizedSerializedSize = size;
      return size;
    }

    private static final long serialVersionUID = 0L;
    @java.lang.Override
    protected java.lang.Object writeReplace()
        throws java.io.ObjectStreamException {
      return super.writeReplace();
    }

    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        com.google.protobuf.ByteString data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        com.google.protobuf.ByteString data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(byte[] data)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        byte[] data,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws com.google.protobuf.InvalidProtocolBufferException {
      return PARSER.parseFrom(data, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseDelimitedFrom(java.io.InputStream input)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseDelimitedFrom(
        java.io.InputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseDelimitedFrom(input, extensionRegistry);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        com.google.protobuf.CodedInputStream input)
        throws java.io.IOException {
      return PARSER.parseFrom(input);
    }
    public static gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parseFrom(
        com.google.protobuf.CodedInputStream input,
        com.google.protobuf.ExtensionRegistryLite extensionRegistry)
        throws java.io.IOException {
      return PARSER.parseFrom(input, extensionRegistry);
    }

    public static Builder newBuilder() { return Builder.create(); }
    public Builder newBuilderForType() { return newBuilder(); }
    public static Builder newBuilder(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage prototype) {
      return newBuilder().mergeFrom(prototype);
    }
    public Builder toBuilder() { return newBuilder(this); }

    @java.lang.Override
    protected Builder newBuilderForType(
        com.google.protobuf.GeneratedMessage.BuilderParent parent) {
      Builder builder = new Builder(parent);
      return builder;
    }
    /**
     * Protobuf type {@code proto.AnalogINMessage}
     */
    public static final class Builder extends
        com.google.protobuf.GeneratedMessage.Builder<Builder> implements
        // @@protoc_insertion_point(builder_implements:proto.AnalogINMessage)
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessageOrBuilder {
      public static final com.google.protobuf.Descriptors.Descriptor
          getDescriptor() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_AnalogINMessage_descriptor;
      }

      protected com.google.protobuf.GeneratedMessage.FieldAccessorTable
          internalGetFieldAccessorTable() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_AnalogINMessage_fieldAccessorTable
            .ensureFieldAccessorsInitialized(
                gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.class, gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.Builder.class);
      }

      // Construct using gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.newBuilder()
      private Builder() {
        maybeForceBuilderInitialization();
      }

      private Builder(
          com.google.protobuf.GeneratedMessage.BuilderParent parent) {
        super(parent);
        maybeForceBuilderInitialization();
      }
      private void maybeForceBuilderInitialization() {
        if (com.google.protobuf.GeneratedMessage.alwaysUseFieldBuilders) {
        }
      }
      private static Builder create() {
        return new Builder();
      }

      public Builder clear() {
        super.clear();
        address_ = 0;
        bitField0_ = (bitField0_ & ~0x00000001);
        boardType_ = "";
        bitField0_ = (bitField0_ & ~0x00000002);
        frameCounter_ = 0;
        bitField0_ = (bitField0_ & ~0x00000004);
        gain_ = 0;
        bitField0_ = (bitField0_ & ~0x00000008);
        status_ = 0;
        bitField0_ = (bitField0_ & ~0x00000010);
        samplesPerChannel_ = 0;
        bitField0_ = (bitField0_ & ~0x00000020);
        numberOfChannels_ = 0;
        bitField0_ = (bitField0_ & ~0x00000040);
        aDC_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        aDCRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        return this;
      }

      public Builder clone() {
        return create().mergeFrom(buildPartial());
      }

      public com.google.protobuf.Descriptors.Descriptor
          getDescriptorForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.internal_static_proto_AnalogINMessage_descriptor;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage getDefaultInstanceForType() {
        return gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance();
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage build() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage result = buildPartial();
        if (!result.isInitialized()) {
          throw newUninitializedMessageException(result);
        }
        return result;
      }

      public gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage buildPartial() {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage result = new gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage(this);
        int from_bitField0_ = bitField0_;
        int to_bitField0_ = 0;
        if (((from_bitField0_ & 0x00000001) == 0x00000001)) {
          to_bitField0_ |= 0x00000001;
        }
        result.address_ = address_;
        if (((from_bitField0_ & 0x00000002) == 0x00000002)) {
          to_bitField0_ |= 0x00000002;
        }
        result.boardType_ = boardType_;
        if (((from_bitField0_ & 0x00000004) == 0x00000004)) {
          to_bitField0_ |= 0x00000004;
        }
        result.frameCounter_ = frameCounter_;
        if (((from_bitField0_ & 0x00000008) == 0x00000008)) {
          to_bitField0_ |= 0x00000008;
        }
        result.gain_ = gain_;
        if (((from_bitField0_ & 0x00000010) == 0x00000010)) {
          to_bitField0_ |= 0x00000010;
        }
        result.status_ = status_;
        if (((from_bitField0_ & 0x00000020) == 0x00000020)) {
          to_bitField0_ |= 0x00000020;
        }
        result.samplesPerChannel_ = samplesPerChannel_;
        if (((from_bitField0_ & 0x00000040) == 0x00000040)) {
          to_bitField0_ |= 0x00000040;
        }
        result.numberOfChannels_ = numberOfChannels_;
        if (((bitField0_ & 0x00000080) == 0x00000080)) {
          aDC_ = java.util.Collections.unmodifiableList(aDC_);
          bitField0_ = (bitField0_ & ~0x00000080);
        }
        result.aDC_ = aDC_;
        if (((bitField0_ & 0x00000100) == 0x00000100)) {
          aDCRaw_ = java.util.Collections.unmodifiableList(aDCRaw_);
          bitField0_ = (bitField0_ & ~0x00000100);
        }
        result.aDCRaw_ = aDCRaw_;
        result.bitField0_ = to_bitField0_;
        onBuilt();
        return result;
      }

      public Builder mergeFrom(com.google.protobuf.Message other) {
        if (other instanceof gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage) {
          return mergeFrom((gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage)other);
        } else {
          super.mergeFrom(other);
          return this;
        }
      }

      public Builder mergeFrom(gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage other) {
        if (other == gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage.getDefaultInstance()) return this;
        if (other.hasAddress()) {
          setAddress(other.getAddress());
        }
        if (other.hasBoardType()) {
          bitField0_ |= 0x00000002;
          boardType_ = other.boardType_;
          onChanged();
        }
        if (other.hasFrameCounter()) {
          setFrameCounter(other.getFrameCounter());
        }
        if (other.hasGain()) {
          setGain(other.getGain());
        }
        if (other.hasStatus()) {
          setStatus(other.getStatus());
        }
        if (other.hasSamplesPerChannel()) {
          setSamplesPerChannel(other.getSamplesPerChannel());
        }
        if (other.hasNumberOfChannels()) {
          setNumberOfChannels(other.getNumberOfChannels());
        }
        if (!other.aDC_.isEmpty()) {
          if (aDC_.isEmpty()) {
            aDC_ = other.aDC_;
            bitField0_ = (bitField0_ & ~0x00000080);
          } else {
            ensureADCIsMutable();
            aDC_.addAll(other.aDC_);
          }
          onChanged();
        }
        if (!other.aDCRaw_.isEmpty()) {
          if (aDCRaw_.isEmpty()) {
            aDCRaw_ = other.aDCRaw_;
            bitField0_ = (bitField0_ & ~0x00000100);
          } else {
            ensureADCRawIsMutable();
            aDCRaw_.addAll(other.aDCRaw_);
          }
          onChanged();
        }
        this.mergeUnknownFields(other.getUnknownFields());
        return this;
      }

      public final boolean isInitialized() {
        return true;
      }

      public Builder mergeFrom(
          com.google.protobuf.CodedInputStream input,
          com.google.protobuf.ExtensionRegistryLite extensionRegistry)
          throws java.io.IOException {
        gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage parsedMessage = null;
        try {
          parsedMessage = PARSER.parsePartialFrom(input, extensionRegistry);
        } catch (com.google.protobuf.InvalidProtocolBufferException e) {
          parsedMessage = (gov.nasa.gsfc.protobuf.ThermometryPacketProtobuf.AnalogINMessage) e.getUnfinishedMessage();
          throw e;
        } finally {
          if (parsedMessage != null) {
            mergeFrom(parsedMessage);
          }
        }
        return this;
      }
      private int bitField0_;

      private int address_ ;
      /**
       * <code>optional int32 address = 1;</code>
       */
      public boolean hasAddress() {
        return ((bitField0_ & 0x00000001) == 0x00000001);
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public int getAddress() {
        return address_;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder setAddress(int value) {
        bitField0_ |= 0x00000001;
        address_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 address = 1;</code>
       */
      public Builder clearAddress() {
        bitField0_ = (bitField0_ & ~0x00000001);
        address_ = 0;
        onChanged();
        return this;
      }

      private java.lang.Object boardType_ = "";
      /**
       * <code>optional string boardType = 2;</code>
       */
      public boolean hasBoardType() {
        return ((bitField0_ & 0x00000002) == 0x00000002);
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public java.lang.String getBoardType() {
        java.lang.Object ref = boardType_;
        if (!(ref instanceof java.lang.String)) {
          com.google.protobuf.ByteString bs =
              (com.google.protobuf.ByteString) ref;
          java.lang.String s = bs.toStringUtf8();
          if (bs.isValidUtf8()) {
            boardType_ = s;
          }
          return s;
        } else {
          return (java.lang.String) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public com.google.protobuf.ByteString
          getBoardTypeBytes() {
        java.lang.Object ref = boardType_;
        if (ref instanceof String) {
          com.google.protobuf.ByteString b = 
              com.google.protobuf.ByteString.copyFromUtf8(
                  (java.lang.String) ref);
          boardType_ = b;
          return b;
        } else {
          return (com.google.protobuf.ByteString) ref;
        }
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardType(
          java.lang.String value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder clearBoardType() {
        bitField0_ = (bitField0_ & ~0x00000002);
        boardType_ = getDefaultInstance().getBoardType();
        onChanged();
        return this;
      }
      /**
       * <code>optional string boardType = 2;</code>
       */
      public Builder setBoardTypeBytes(
          com.google.protobuf.ByteString value) {
        if (value == null) {
    throw new NullPointerException();
  }
  bitField0_ |= 0x00000002;
        boardType_ = value;
        onChanged();
        return this;
      }

      private int frameCounter_ ;
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public boolean hasFrameCounter() {
        return ((bitField0_ & 0x00000004) == 0x00000004);
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public int getFrameCounter() {
        return frameCounter_;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder setFrameCounter(int value) {
        bitField0_ |= 0x00000004;
        frameCounter_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 frameCounter = 3;</code>
       */
      public Builder clearFrameCounter() {
        bitField0_ = (bitField0_ & ~0x00000004);
        frameCounter_ = 0;
        onChanged();
        return this;
      }

      private int gain_ ;
      /**
       * <code>optional int32 gain = 4;</code>
       */
      public boolean hasGain() {
        return ((bitField0_ & 0x00000008) == 0x00000008);
      }
      /**
       * <code>optional int32 gain = 4;</code>
       */
      public int getGain() {
        return gain_;
      }
      /**
       * <code>optional int32 gain = 4;</code>
       */
      public Builder setGain(int value) {
        bitField0_ |= 0x00000008;
        gain_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 gain = 4;</code>
       */
      public Builder clearGain() {
        bitField0_ = (bitField0_ & ~0x00000008);
        gain_ = 0;
        onChanged();
        return this;
      }

      private int status_ ;
      /**
       * <code>optional int32 status = 5;</code>
       */
      public boolean hasStatus() {
        return ((bitField0_ & 0x00000010) == 0x00000010);
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public int getStatus() {
        return status_;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder setStatus(int value) {
        bitField0_ |= 0x00000010;
        status_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 status = 5;</code>
       */
      public Builder clearStatus() {
        bitField0_ = (bitField0_ & ~0x00000010);
        status_ = 0;
        onChanged();
        return this;
      }

      private int samplesPerChannel_ ;
      /**
       * <code>optional int32 samplesPerChannel = 6;</code>
       */
      public boolean hasSamplesPerChannel() {
        return ((bitField0_ & 0x00000020) == 0x00000020);
      }
      /**
       * <code>optional int32 samplesPerChannel = 6;</code>
       */
      public int getSamplesPerChannel() {
        return samplesPerChannel_;
      }
      /**
       * <code>optional int32 samplesPerChannel = 6;</code>
       */
      public Builder setSamplesPerChannel(int value) {
        bitField0_ |= 0x00000020;
        samplesPerChannel_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 samplesPerChannel = 6;</code>
       */
      public Builder clearSamplesPerChannel() {
        bitField0_ = (bitField0_ & ~0x00000020);
        samplesPerChannel_ = 0;
        onChanged();
        return this;
      }

      private int numberOfChannels_ ;
      /**
       * <code>optional int32 numberOfChannels = 7;</code>
       */
      public boolean hasNumberOfChannels() {
        return ((bitField0_ & 0x00000040) == 0x00000040);
      }
      /**
       * <code>optional int32 numberOfChannels = 7;</code>
       */
      public int getNumberOfChannels() {
        return numberOfChannels_;
      }
      /**
       * <code>optional int32 numberOfChannels = 7;</code>
       */
      public Builder setNumberOfChannels(int value) {
        bitField0_ |= 0x00000040;
        numberOfChannels_ = value;
        onChanged();
        return this;
      }
      /**
       * <code>optional int32 numberOfChannels = 7;</code>
       */
      public Builder clearNumberOfChannels() {
        bitField0_ = (bitField0_ & ~0x00000040);
        numberOfChannels_ = 0;
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Float> aDC_ = java.util.Collections.emptyList();
      private void ensureADCIsMutable() {
        if (!((bitField0_ & 0x00000080) == 0x00000080)) {
          aDC_ = new java.util.ArrayList<java.lang.Float>(aDC_);
          bitField0_ |= 0x00000080;
         }
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public java.util.List<java.lang.Float>
          getADCList() {
        return java.util.Collections.unmodifiableList(aDC_);
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public int getADCCount() {
        return aDC_.size();
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public float getADC(int index) {
        return aDC_.get(index);
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public Builder setADC(
          int index, float value) {
        ensureADCIsMutable();
        aDC_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public Builder addADC(float value) {
        ensureADCIsMutable();
        aDC_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public Builder addAllADC(
          java.lang.Iterable<? extends java.lang.Float> values) {
        ensureADCIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aDC_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated float aDC = 8;</code>
       */
      public Builder clearADC() {
        aDC_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000080);
        onChanged();
        return this;
      }

      private java.util.List<java.lang.Integer> aDCRaw_ = java.util.Collections.emptyList();
      private void ensureADCRawIsMutable() {
        if (!((bitField0_ & 0x00000100) == 0x00000100)) {
          aDCRaw_ = new java.util.ArrayList<java.lang.Integer>(aDCRaw_);
          bitField0_ |= 0x00000100;
         }
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public java.util.List<java.lang.Integer>
          getADCRawList() {
        return java.util.Collections.unmodifiableList(aDCRaw_);
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public int getADCRawCount() {
        return aDCRaw_.size();
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public int getADCRaw(int index) {
        return aDCRaw_.get(index);
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public Builder setADCRaw(
          int index, int value) {
        ensureADCRawIsMutable();
        aDCRaw_.set(index, value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public Builder addADCRaw(int value) {
        ensureADCRawIsMutable();
        aDCRaw_.add(value);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public Builder addAllADCRaw(
          java.lang.Iterable<? extends java.lang.Integer> values) {
        ensureADCRawIsMutable();
        com.google.protobuf.AbstractMessageLite.Builder.addAll(
            values, aDCRaw_);
        onChanged();
        return this;
      }
      /**
       * <code>repeated int32 aDCRaw = 9;</code>
       */
      public Builder clearADCRaw() {
        aDCRaw_ = java.util.Collections.emptyList();
        bitField0_ = (bitField0_ & ~0x00000100);
        onChanged();
        return this;
      }

      // @@protoc_insertion_point(builder_scope:proto.AnalogINMessage)
    }

    static {
      defaultInstance = new AnalogINMessage(true);
      defaultInstance.initFields();
    }

    // @@protoc_insertion_point(class_scope:proto.AnalogINMessage)
  }

  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_ThermometryPacket_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_ThermometryPacket_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_DSPIDMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_DSPIDMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_TReadMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_TReadMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_MasterMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_MasterMessage_fieldAccessorTable;
  private static final com.google.protobuf.Descriptors.Descriptor
    internal_static_proto_AnalogINMessage_descriptor;
  private static
    com.google.protobuf.GeneratedMessage.FieldAccessorTable
      internal_static_proto_AnalogINMessage_fieldAccessorTable;

  public static com.google.protobuf.Descriptors.FileDescriptor
      getDescriptor() {
    return descriptor;
  }
  private static com.google.protobuf.Descriptors.FileDescriptor
      descriptor;
  static {
    java.lang.String[] descriptorData = {
      "\n\ntest.proto\022\005proto\"\233\001\n\021ThermometryPacke" +
      "t\022\037\n\002ds\030\001 \001(\0132\023.proto.DSPIDMessage\022\037\n\002tr" +
      "\030\002 \001(\0132\023.proto.TReadMessage\022 \n\002ms\030\003 \001(\0132" +
      "\024.proto.MasterMessage\022\"\n\002ai\030\004 \001(\0132\026.prot" +
      "o.AnalogINMessage\"\210\005\n\014DSPIDMessage\022\017\n\007ad" +
      "dress\030\001 \001(\005\022\021\n\tboardType\030\002 \001(\t\022\024\n\014frameC" +
      "ounter\030\003 \001(\005\022\014\n\004tMux\030\004 \001(\t\022\016\n\006status\030\005 \001" +
      "(\005\022\r\n\005demod\030\006 \003(\002\022\014\n\004aDac\030\007 \001(\002\022\014\n\004gDac\030" +
      "\010 \001(\005\022\017\n\007coilDAC\030\t \003(\002\022\020\n\010coilVMon\030\n \001(\002" +
      "\022\022\n\ncoilIsense\030\013 \003(\002\022\020\n\010analogIn\030\014 \001(\002\022\017",
      "\n\007vsupply\030\r \001(\002\022\013\n\003gnd\030\016 \001(\002\022\021\n\tboardTem" +
      "p\030\017 \001(\002\022\024\n\014externalTemp\030\020 \001(\002\022\021\n\tanalogO" +
      "ut\030\021 \003(\002\022\023\n\013pidSetPoint\030\022 \001(\002\022\020\n\010pidErro" +
      "r\030\023 \001(\005\022\026\n\016pidAccumulator\030\024 \001(\005\022\014\n\004pidP\030" +
      "\025 \001(\005\022\014\n\004pidI\030\026 \001(\005\022\020\n\010demodRaw\030\027 \003(\005\022\017\n" +
      "\007aDacRaw\030\030 \001(\005\022\022\n\ncoilDACRaw\030\031 \003(\005\022\023\n\013co" +
      "ilVMonRaw\030\032 \001(\005\022\025\n\rcoilIsenseRaw\030\033 \003(\005\022\023" +
      "\n\013analogInRaw\030\034 \001(\005\022\022\n\nvsupplyRaw\030\035 \001(\005\022" +
      "\016\n\006gndRaw\030\036 \001(\005\022\024\n\014boardTempRaw\030\037 \001(\005\022\027\n" +
      "\017externalTempRaw\030  \001(\005\022\024\n\014analogOutRaw\030!",
      " \003(\005\022\026\n\016pidSetPointRaw\030\" \001(\005\"\327\001\n\014TReadMe" +
      "ssage\022\017\n\007address\030\001 \001(\005\022\021\n\tboardType\030\002 \001(" +
      "\t\022\024\n\014frameCounter\030\003 \001(\005\022\014\n\004tMux\030\004 \001(\t\022\016\n" +
      "\006status\030\005 \001(\005\022\r\n\005demod\030\006 \003(\002\022\014\n\004aDac\030\007 \003" +
      "(\002\022\014\n\004gDac\030\010 \003(\005\022\014\n\004nsum\030\t \001(\005\022\023\n\013temper" +
      "ature\030\n \003(\002\022\020\n\010demodRaw\030\013 \003(\005\022\017\n\007aDacRaw" +
      "\030\014 \003(\005\"\207\001\n\rMasterMessage\022\017\n\007address\030\001 \001(" +
      "\005\022\021\n\tboardType\030\002 \001(\t\022\024\n\014frameCounter\030\003 \001" +
      "(\005\022\016\n\006status\030\004 \001(\005\022\025\n\ruBCFrameCount\030\005 \001(" +
      "\005\022\025\n\rpICFrameCount\030\006 \001(\005\"\273\001\n\017AnalogINMes",
      "sage\022\017\n\007address\030\001 \001(\005\022\021\n\tboardType\030\002 \001(\t" +
      "\022\024\n\014frameCounter\030\003 \001(\005\022\014\n\004gain\030\004 \001(\005\022\016\n\006" +
      "status\030\005 \001(\005\022\031\n\021samplesPerChannel\030\006 \001(\005\022" +
      "\030\n\020numberOfChannels\030\007 \001(\005\022\013\n\003aDC\030\010 \003(\002\022\016" +
      "\n\006aDCRaw\030\t \003(\005B3\n\026gov.nasa.gsfc.protobuf" +
      "B\031ThermometryPacketProtobuf"
    };
    com.google.protobuf.Descriptors.FileDescriptor.InternalDescriptorAssigner assigner =
        new com.google.protobuf.Descriptors.FileDescriptor.    InternalDescriptorAssigner() {
          public com.google.protobuf.ExtensionRegistry assignDescriptors(
              com.google.protobuf.Descriptors.FileDescriptor root) {
            descriptor = root;
            return null;
          }
        };
    com.google.protobuf.Descriptors.FileDescriptor
      .internalBuildGeneratedFileFrom(descriptorData,
        new com.google.protobuf.Descriptors.FileDescriptor[] {
        }, assigner);
    internal_static_proto_ThermometryPacket_descriptor =
      getDescriptor().getMessageTypes().get(0);
    internal_static_proto_ThermometryPacket_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_ThermometryPacket_descriptor,
        new java.lang.String[] { "Ds", "Tr", "Ms", "Ai", });
    internal_static_proto_DSPIDMessage_descriptor =
      getDescriptor().getMessageTypes().get(1);
    internal_static_proto_DSPIDMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_DSPIDMessage_descriptor,
        new java.lang.String[] { "Address", "BoardType", "FrameCounter", "TMux", "Status", "Demod", "ADac", "GDac", "CoilDAC", "CoilVMon", "CoilIsense", "AnalogIn", "Vsupply", "Gnd", "BoardTemp", "ExternalTemp", "AnalogOut", "PidSetPoint", "PidError", "PidAccumulator", "PidP", "PidI", "DemodRaw", "ADacRaw", "CoilDACRaw", "CoilVMonRaw", "CoilIsenseRaw", "AnalogInRaw", "VsupplyRaw", "GndRaw", "BoardTempRaw", "ExternalTempRaw", "AnalogOutRaw", "PidSetPointRaw", });
    internal_static_proto_TReadMessage_descriptor =
      getDescriptor().getMessageTypes().get(2);
    internal_static_proto_TReadMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_TReadMessage_descriptor,
        new java.lang.String[] { "Address", "BoardType", "FrameCounter", "TMux", "Status", "Demod", "ADac", "GDac", "Nsum", "Temperature", "DemodRaw", "ADacRaw", });
    internal_static_proto_MasterMessage_descriptor =
      getDescriptor().getMessageTypes().get(3);
    internal_static_proto_MasterMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_MasterMessage_descriptor,
        new java.lang.String[] { "Address", "BoardType", "FrameCounter", "Status", "UBCFrameCount", "PICFrameCount", });
    internal_static_proto_AnalogINMessage_descriptor =
      getDescriptor().getMessageTypes().get(4);
    internal_static_proto_AnalogINMessage_fieldAccessorTable = new
      com.google.protobuf.GeneratedMessage.FieldAccessorTable(
        internal_static_proto_AnalogINMessage_descriptor,
        new java.lang.String[] { "Address", "BoardType", "FrameCounter", "Gain", "Status", "SamplesPerChannel", "NumberOfChannels", "ADC", "ADCRaw", });
  }

  // @@protoc_insertion_point(outer_class_scope)
}
